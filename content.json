{"meta":{"title":"TianciBlog","subtitle":"Tianciの小窝","description":"Tianciの小窝,天赐个人博客,TianciBlog","author":"Tianci","url":""},"pages":[{"title":"关于","date":"2021-09-07T02:54:18.588Z","updated":"2021-09-07T02:54:18.588Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"关于博🐷 与&nbsp; Tianci&nbsp; 对话中... bot_ui_ini()"},{"title":"友链","date":"2021-09-07T02:54:18.603Z","updated":"2021-09-07T02:54:18.603Z","comments":false,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-09-07T02:54:18.603Z","updated":"2021-09-07T02:54:18.603Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"吟诗一首","keywords":"留言板"},{"title":"闲话","date":"2021-09-07T02:54:18.603Z","updated":"2021-09-07T02:54:18.603Z","comments":false,"path":"mood/index.html","permalink":"/mood/index.html","excerpt":"","text":"new Artitalk({ appId: '5H7AydmPGv5z6GjvxW088cDJ-MdYXbMMI', // Your leancloud appId appKey: '3OgRwXUWbmNx1WhFlSs7ek6V', // Your leancloud appKey atEmoji: { \"滑稽\": \"https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.9/img/Sakura/images/smilies/icon_huaji.gif\", \"汗\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200411023456.webp\", \"点赞\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/kawayi.webp\", \"傲娇\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409103906.webp\", \"开心\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409104757.webp\", \"扣手手\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409130304.webp\", \"仙女下凡\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409130301.webp\", \"得瑟\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409130258.webp\", \"揉左脸\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409130254.webp\", \"揉右脸\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200409130249.webp\", \"彩虹滑稽\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/caihongtiao.webp\", \"呆滞\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/daizhi.webp\", \"躲进小被子\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/djxbz.webp\", \"拽走小被子\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/zzxbz.webp\", \"干\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/gan.webp\", \"给我也整一个\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/gwyzyg.webp\", \"害怕\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/hp.webp\", \"怀疑\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200412095314.webp\", \"草\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/imgcao.webp\", \"花\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/imghua.webp\", \"日\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/imgri.webp\", \"叶\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/imgye.webp\", \"夹住\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/kz.webp\", \"目瞪狗呆\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/20200412095243.webp\", \"劈叉\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/pc.webp\", \"踢楼上屁股\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/tlspg.webp\", tql: \"https://cdn.jsdelivr.net/gh/drew233/cdn/tql.webp\", \"无语\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/wuyu.webp\", \"转圈圈\": \"https://cdn.jsdelivr.net/gh/drew233/cdn/zqq.webp\" }, })"},{"title":"","date":"2021-09-07T02:54:18.463Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"404/css/style.css","permalink":"/404/css/style.css","excerpt":"","text":".left-section .inner-content { position: absolute; top: 50%; transform: translateY(-50%); } * { box-sizing: border-box; } html, body { margin: 0; padding: 0; } body { font-family: 'Fira Sans', sans-serif; color: #f5f6fa; } .background { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(#0c0e10, #446182); } .background .ground { position: absolute; bottom: 0; width: 100%; height: 25vh; background: #0c0e10; } @media (max-width: 770px) { .background .ground { height: 0vh; } } .container { position: relative; margin: 0 auto; width: 85%; height: 100vh; padding-bottom: 25vh; display: flex; flex-direction: row; justify-content: space-around; } @media (max-width: 770px) { .container { flex-direction: column; padding-bottom: 0vh; } } .left-section, .right-section { position: relative; } .left-section { width: 40%; } @media (max-width: 770px) { .left-section { width: 100%; height: 40%; position: absolute; top: 0; } } @media (max-width: 770px) { .left-section .inner-content { position: relative; padding: 1rem 0; } } .heading { text-align: center; font-size: 9em; line-height: 1.3em; margin: 2rem 0 0.5rem 0; padding: 0; text-shadow: 0 0 1rem #fefefe; } @media (max-width: 770px) { .heading { font-size: 7em; line-height: 1.15; margin: 0; } } .subheading { text-align: center; max-width: 480px; font-size: 1.5em; line-height: 1.15em; padding: 0 1rem; margin: 0 auto; } .index-btn { margin-top: 50px; text-align: center; } .index-btn a { padding: 10px 20px; border: 1px solid #fff; border-radius: 4px; color: #fff; text-decoration: none; } .index-btn a:hover { background-color: #000; } @media (max-width: 770px) { .subheading { font-size: 1.3em; line-height: 1.15; max-width: 100%; } } .right-section { width: 50%; } @media (max-width: 770px) { .right-section { width: 100%; height: 60%; position: absolute; bottom: 0; } } .svgimg { position: absolute; bottom: 0; padding-top: 10vh; padding-left: 1vh; max-width: 100%; max-height: 100%; } @media (max-width: 770px) { .svgimg { padding: 0; } } .svgimg .bench-legs { fill: #0c0e10; } .svgimg .top-bench, .svgimg .bottom-bench { stroke: #0c0e10; stroke-width: 1px; fill: #5b3e2b; } .svgimg .bottom-bench path:nth-child(1) { fill: #432d20; } .svgimg .lamp-details { fill: #202425; } .svgimg .lamp-accent { fill: #2c3133; } .svgimg .lamp-bottom { fill: linear-gradient(#202425, #0c0e10); } .svgimg .lamp-light { fill: #efefef; } @keyframes glow { 0% { text-shadow: 0 0 1rem #fefefe; } 50% { text-shadow: 0 0 1.85rem #ededed; } 100% { text-shadow: 0 0 1rem #fefefe; } }"},{"title":"","date":"2021-09-07T02:54:18.603Z","updated":"2021-09-07T02:54:18.603Z","comments":true,"path":"mood/css/style.css","permalink":"/mood/css/style.css","excerpt":"","text":"#shuoshuo_content { background-color: #fff; padding: 10px; min-height: 500px; } /* shuo */ body.theme-dark .cbp_tmtimeline::before { background: RGBA(255, 255, 255, 0.06); } ul.cbp_tmtimeline { padding: 0; } div class.cdp_tmlabel > li .cbp_tmlabel { margin-bottom: 0; } .cbp_tmtimeline { margin: 30px 0 0 0; padding: 0; list-style: none; position: relative; } /* The line */ .cbp_tmtimeline:before { content: ''; position: absolute; top: 0; bottom: 0; width: 4px; background: RGBA(0, 0, 0, 0.02); left: 80px; margin-left: 10px; } /* The date/time */ .cbp_tmtimeline > li .cbp_tmtime { display: block; /* width: 29%; */ /* padding-right: 110px; */ max-width: 70px; position: absolute; } .cbp_tmtimeline > li .cbp_tmtime span { display: block; text-align: right; } .cbp_tmtimeline > li .cbp_tmtime span:first-child { font-size: 0.9em; color: #bdd0db; } .cbp_tmtimeline > li .cbp_tmtime span:last-child { font-size: 1.2em; color: #9BCD9B; } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmtime span:last-child { color: RGBA(255, 125, 73, 0.75); } div.cbp_tmlabel > p { margin-bottom: 0; } /* Right content */ .cbp_tmtimeline > li .cbp_tmlabel { margin: 0 0 45px 65px; background: #9BCD9B; color: #fff; padding: .8em 1.2em .4em 1.2em; /* font-size: 1.2em; */ font-weight: 300; line-height: 1.4; position: relative; border-radius: 5px; transition: all 0.3s ease 0s; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15); cursor: pointer; display: block; /* 禁用点击事件 */ /* pointer-events:none; */ } .cbp_tmlabel:hover { /* transform:scale(1.05); */ transform: translateY(-3px); z-index: 1; box-shadow: 0 15px 32px rgba(0, 0, 0, 0.15) !important } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmlabel { background: RGBA(255, 125, 73, 0.75); } /* The triangle */ .cbp_tmtimeline > li .cbp_tmlabel:after { right: 100%; border: solid transparent; content: \" \"; height: 0; width: 0; position: absolute; pointer-events: none; border-right-color: #9BCD9B; border-width: 10px; top: 4px; } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmlabel:after { border-right-color: RGBA(255, 125, 73, 0.75); } p.shuoshuo_time { margin-top: 10px; border-top: 1px dashed #fff; padding-top: 5px; } /* Media */ @media screen and (max-width: 65.375em) { .cbp_tmtimeline > li .cbp_tmtime span:last-child { font-size: 1.2em; } } .shuoshuo_author_img img { border: 1px solid #ddd; padding: 2px; float: left; border-radius: 64px; transition: all 1.0s; } .avatar { border-radius: 100% !important; -moz-border-radius: 100% !important; box-shadow: inset 0 -1px 0 3333sf; -webkit-box-shadow: inset 0 -1px 0 3333sf; -webkit-transition: 0.4s; -webkit-transition: -webkit-transform 0.4s ease-out; transition: transform 0.4s ease-out; -moz-transition: -moz-transform 0.4s ease-out; } .zhuan { transform: rotateZ(720deg); -webkit-transform: rotateZ(720deg); -moz-transform: rotateZ(720deg); } /* end */"}],"posts":[{"title":"Layui小知识","slug":"Layui_First","date":"2021-08-19T15:00:00.000Z","updated":"2021-09-07T02:54:18.478Z","comments":true,"path":"Other/Layui_First/","link":"","permalink":"/Other/Layui_First/","excerpt":"遇到的一些问题及解决方法","text":"遇到的一些问题及解决方法 首先定义Layui需要的组件var $ = layui.$; var admin = layui.admin; var table = layui.table; var layer = layui.layer; var form = layui.form; 下拉框从接口获取数据并赋值&lt;div class=&quot;layui-input-inline&quot; style=&quot;width:100px;&quot;&gt; &lt;select asp-for=&quot;绑定字段&quot; name=&quot;绑定字段&quot; class=&quot;绑定字段Mode&quot; autocomplete=&quot;off&quot; lay-search&gt; &lt;/select&gt; &lt;/div&gt; $(function () { $.ajax({ url: &#39;@Url.Action(&quot;Create&quot;, &quot;User&quot;)&#39;,//请求地址（MVC写法，方法，控制器名） type: &#39;POST&#39;, dataType: &#39;json&#39;, contentType: &quot;application/json; charset=utf-8&quot;, success: function (result) { if (result.code == 200) { for (var k in result.data) { $(&quot;.绑定字段Mode&quot;).append(&quot;&lt;option value=&#39;&quot; + result.data[k].KeyName + &quot;&#39;&gt;&quot; + result.data[k].Value + &quot;&lt;/option&gt;&quot;);//通过class添加选项 } layui.use(&#39;form&#39;, function () { var form = layui.form; form.render(); }); } else { layer.msg(result.msg, { icon: 2, offset: &#39;200px&#39;, time: 3000 }) } } }); }); 获取当前页面表单里面的数据var data = form.val(&#39;formId&#39;);//通过表单Id取全部字段数据 获取子页面表单数据逻辑：打开添加表单（新页面Create）点提交调用POST方法传值（dataValue）layer.open({ type: 2, title: &#39;添加用户&#39;, id: &#39;CreateUser&#39;, content: &#39;@Url.Action(&quot;Create&quot;, &quot;User&quot;)&#39;,//打开页面（MVC写法，对应页面及GET方法，控制器名） area: [&#39;528px&#39;, &#39;468px&#39;], maxmin: true, btn: [&#39;提交&#39;, &#39;关闭&#39;], yes: function (index, layero) { var iframeWindow = layero.find(&#39;iframe&#39;)[0].contentWindow; var dataValue = iframeWindow.layui.form.val(&quot;子页面form表单Id&quot;);//表单数据 $.ajax({ url: &#39;@Url.Action(&quot;Create&quot;, &quot;User&quot;)&#39;,//请求POST地址（MVC写法，POST方法，控制器名） type: &#39;POST&#39;, dataType: &#39;json&#39;, data: JSON.stringify(dataValue), contentType: &quot;application/json; charset=utf-8&quot;, success: function (result) { if (result.responseCode == 200) { layer.msg(result.Message, { offset: &#39;200px&#39;, time: 3000 }) layer.close(index); } else { layer.msg(result.Message, { icon: 2, offset: &#39;200px&#39;, time: 3000 }) } } }); }, cancel: function () { return true; }, end: function () { table.reload(&#39;当前页面列表TableId&#39;, { page: { curr: 1 } }); } }); 给新页面表单赋默认值，点击修改的场景在控制器内Edit对应的GET方法返回值就可以了，Edit页面form表单绑定","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"初识ML.NET","slug":"ML.NET","date":"2021-08-11T15:00:00.000Z","updated":"2021-09-07T02:54:18.478Z","comments":true,"path":"Other/ML.NET/","link":"","permalink":"/Other/ML.NET/","excerpt":"什么是ML.NET，官方文档给出解释如下","text":"什么是ML.NET，官方文档给出解释如下 ML.NET 使你能够在联机或脱机场景中将机器学习添加到 .NET 应用程序中。 借助此功能，可以使用应用程序的可用数据进行自动预测。 机器学习应用程序利用数据中的模式来进行预测，而不需要进行显式编程。 ML.NET 的核心是机器学习模型 。 该模型指定将输入数据转换为预测所需的步骤。 借助 ML.NET，可以通过指定算法来训练自定义模型，也可以导入预训练的 TensorFlow 和 ONNX 模型。 拥有模型后，可以将其添加到应用程序中进行预测。 意思就是可以脱机训练模型，让程序拥有自主判断意识第一步创建一个机器学习模型，在一个新项目中右击添加机器学习 选择一个方案，这边选择图像分类 选择环境，因为没有Azure上的数据所以选择本地文件夹 这边选择的图片有点多，分为四个类型 点击训练，如果图片太多训练时间也会变长，这边已经训练好了 训练完成可以选择一张本地图片来进行分析 最后可以将代码添加到本地，查看运行逻辑以及生成的文件 打开ConsoleApp.Program.cs文件修改ModelInput sampleData = new ModelInput() { ImageSource = &quot;可填本地任意图片路径&quot; }; 我这边下载了很多图片进行循环分析 最后一共五十张图片，误判11张，想要识别更加精确就得添加更多图片识别更多细节进行分析","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"Appveyor持续集成Hexo","slug":"Hexo_Appveyor","date":"2021-08-06T18:00:00.000Z","updated":"2021-09-07T02:54:18.478Z","comments":true,"path":"Other/Hexo_Appveyor/","link":"","permalink":"/Other/Hexo_Appveyor/","excerpt":"半年没写博客，突然接触到一个新词叫做CI（持续集成）和CD（持续交付）学习一下AppVeyor持续集成Hexo并配置GitHub Pages","text":"半年没写博客，突然接触到一个新词叫做CI（持续集成）和CD（持续交付）学习一下AppVeyor持续集成Hexo并配置GitHub Pages 创建项目，在 /projects 页面选择你的博客源码仓库 点击项目中 SETTINGS 选项卡，如果项目分支不是默认的，修改 Default branch再点击 Environment 栏目，设置4个环境变量： name value STATIC_SITE_REPO 静态网址文件存放git地址 TARGET_BRANCH 分支（默认master） GIT_USER_EMAIL git账号 GIT_USER_NAME git名称 GitHub 添加Access Token在https://ci.appveyor.com/tools/encrypt页面加密配置CI，项目根目录添加appveyor.ymlclone_depth: 5 environment: access_token: secure: You Access Token matrix: - nodejs_version: &quot;12&quot; //因为node 14版本生成页面和文件为空，这里改为12版本 install: - ps: Install-Product node $env:nodejs_version - node --version - npm --version - npm install - npm install hexo-cli -g build_script: - hexo generate artifacts: - path: public on_success: - git config --global credential.helper store - ps: Add-Content &quot;$env:USERPROFILE\\.git-credentials&quot; &quot;https://$($env:access_token):x-oauth-basic@github.com`n&quot; - git config --global user.email &quot;%GIT_USER_EMAIL%&quot; - git config --global user.name &quot;%GIT_USER_NAME%&quot; - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\\static-site - cd %TEMP%\\static-site - del * /f /q - for /d %%p IN (*) do rmdir &quot;%%p&quot; /s /q - SETLOCAL EnableDelayedExpansion &amp; robocopy &quot;%APPVEYOR_BUILD_FOLDER%\\public&quot; &quot;%TEMP%\\static-site&quot; /e &amp; IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1)) - git add -A - git commit -m &quot;Update Static Site&quot; - git push origin %TARGET_BRANCH% - appveyor AddMessage &quot;Static Site Updated&quot; 最后代码提交到Git，AppVeyor会自动接收到更新并build提交到指定Git仓库之后更新博客以及代码只需要push即可","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"学习.NET Core Jwt授权与鉴权","slug":"DotNETCore_WebAPI_Jwt","date":"2021-03-03T01:00:00.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/DotNETCore_WebAPI_Jwt/","link":"","permalink":"/DotNET/DotNETCore_WebAPI_Jwt/","excerpt":"大晚上写的博客，内容不是很细致，记录一个简单的过程","text":"大晚上写的博客，内容不是很细致，记录一个简单的过程 首先安装jwt所需的Nuget包Microsoft.AspNetCore.Authentication.JwtBearer System.ldentityModel.Tokens.Jwt 根据账户生成token的方法/// &lt;summary&gt; /// 获取token /// &lt;/summary&gt; /// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static string GetToken(string username) { if (!string.IsNullOrEmpty(username)) { var claims = new[] { new Claim(JwtRegisteredClaimNames.Sub,username), new Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString()) }; var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&quot;SDMC-CJAS1-SAD-DFSFA-SADHJVF-VF&quot;)); var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256); var token = new JwtSecurityToken ( issuer: &quot;Admin&quot;,//签发人 audience: &quot;Admin&quot;,//受众 claims: claims, expires: DateTime.Now.AddMinutes(3),//过期时间 signingCredentials: creds ); return new JwtSecurityTokenHandler().WriteToken(token); } else { return &quot;账号不存在&quot;; } } ConfigureServices添加JWT验证services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) .AddJwtBearer(options =&gt; { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuer = true,//是否验证Issuer ValidateAudience = true,//是否验证Audience ValidateLifetime = true,//是否验证失效时间 ClockSkew = TimeSpan.FromSeconds(3), ValidateIssuerSigningKey = true,//是否验证SecurityKey ValidAudience = &quot;Admin&quot;,//Audience ValidIssuer = &quot;Admin&quot;,//Issuer，这两项和前面签发jwt的设置一致 IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&quot;SDMC-CJAS1-SAD-DFSFA-SADHJVF-VF&quot;))//拿到SecurityKey }; options.Events = new JwtBearerEvents { //此处为权限验证失败后触发的事件 OnChallenge = context =&gt; { //此处代码为终止.Net Core默认的返回类型和数据结果，这个很重要哦，必须 context.HandleResponse(); //自定义自己想要返回的数据结果 var payload = JsonConvert.SerializeObject(new { code = 401, res = new { msg = &quot;Token过期，请重新登录!!!&quot; } }); //自定义返回的数据类型 context.Response.ContentType = &quot;application/json&quot;; //自定义返回状态码，默认为401 我这里改成 200 context.Response.StatusCode = StatusCodes.Status401Unauthorized; //输出Json数据结果 context.Response.WriteAsync(payload); return Task.FromResult(0); } }; }); Configure添加jwt鉴权//jwt鉴权 app.UseAuthentication(); //使用跨域 app.UseHttpsRedirection().UseCors(builder =&gt; builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()); 最后控制器添加[Authorize]用来鉴权如果要使用Swagger进行鉴权，在ConfigureServices里面的services.AddSwaggerGen里面加上下面这段代码即可c.AddSecurityDefinition(&quot;Bearer&quot;, new OpenApiSecurityScheme { In = ParameterLocation.Header, Type = SecuritySchemeType.ApiKey, Description = &quot;直接在下框中输入Bearer {token}（注意两者之间是一个空格）&quot;, Name = &quot;Authorization&quot;, BearerFormat = &quot;JWT&quot;, Scheme = &quot;Bearer&quot; }); c.AddSecurityDefinition(&quot;Bearer&quot;, new OpenApiSecurityScheme { In = ParameterLocation.Header, Type = SecuritySchemeType.ApiKey, Description = &quot;直接在下框中输入Bearer {token}（注意两者之间是一个空格）&quot;, Name = &quot;Authorization&quot;, BearerFormat = &quot;JWT&quot;, Scheme = &quot;Bearer&quot; }); c.AddSecurityRequirement(new OpenApiSecurityRequirement { { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = &quot;Bearer&quot; } }, new string[] {} } });","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"WPF DataTable帮助类","slug":"WPF_Learning_2","date":"2021-01-21T11:30:00.000Z","updated":"2021-09-07T02:54:18.588Z","comments":true,"path":"DotNET/WPF_Learning_2/","link":"","permalink":"/DotNET/WPF_Learning_2/","excerpt":"分享一下WPF DataTable帮助类","text":"分享一下WPF DataTable帮助类 DataTable导出CSV/// &lt;summary&gt; /// DataTable导出CSV /// &lt;/summary&gt; /// &lt;param name=&quot;dt&quot;&gt;&lt;/param&gt; public void SaveCSV(DataTable dt) { SaveFileDialog saveFile = new SaveFileDialog(); saveFile.Title = &quot;保存文件&quot;; saveFile.Filter = &quot;CSV文件(*.csv) |*.csv |所有文件(*.*) |*.*&quot;; saveFile.FilterIndex = 1; if (saveFile.ShowDialog() == System.Windows.Forms.DialogResult.OK) { string fileName = saveFile.FileName; if (File.Exists(fileName)) { File.Delete(fileName); } FileStream fs = null; StreamWriter sw = null; //先打印标头 StringBuilder strColu = new StringBuilder(); StringBuilder strValue = new StringBuilder(); int i = 0; try { fs = new FileStream(fileName, FileMode.Create, FileAccess.Write); sw = new StreamWriter(fs, Encoding.Default); for (i = 0; i &lt;= dt.Columns.Count - 1; i++) { strColu.Append(dt.Columns[i].ColumnName); strColu.Append(&quot;,&quot;); } strColu.Remove(strColu.Length - 1, 1);//移出掉最后一个,字符 sw.WriteLine(strColu); foreach (DataRow dr in dt.Rows) { strValue.Remove(0, strValue.Length);//移出 for (i = 0; i &lt;= dt.Columns.Count - 1; i++) { strValue.Append(ReplaceChar(dr[i] == DBNull.Value ? &quot;&quot; : dr[i].ToString())); strValue.Append(&quot;,&quot;); } strValue.Remove(strValue.Length - 1, 1);//移出掉最后一个,字符 sw.WriteLine(strValue.ToString()); } sw.Close(); } catch (Exception ex) { System.Windows.MessageBox.Show(ex.Message.ToString()); } System.Windows.Forms.MessageBox.Show(&quot;保存CSV成功&quot;, &quot;提示&quot;, MessageBoxButtons.OK, MessageBoxIcon.Information); } } /// &lt;summary&gt; /// 防止串列 /// &lt;/summary&gt; /// &lt;param name=&quot;str&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; private string ReplaceChar(string str) { string field = str; if (field.IndexOf(&quot;+&quot;) == 0 || field.IndexOf(&quot;-&quot;) == 0 || field.IndexOf(&quot;=&quot;) == 0 || field.IndexOf(&quot;&#39;&quot;) == 0) { if (IsNum(field)) { return field; } return string.Format(&quot;\\t{0}&quot;, field); } if (field.IndexOf(&#39;,&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field.IndexOf(&#39;&quot;&#39;) &gt;= 0) { return string.Format(&quot;\\t{0}&quot;, field); } if (field.IndexOf(&#39;\\r&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field.IndexOf(&#39;\\n&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field.IndexOf(&#39;\\&quot;&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field != field.Trim()) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } return field; } private bool IsNum(object num) { try { Convert.ToDecimal(num); return true; } catch { return false; } } DataTable转Excel/// &lt;summary&gt; /// DataTable转Excel /// &lt;/summary&gt; /// &lt;param name=&quot;m_DataTable&quot;&gt;&lt;/param&gt; public void DataToExcel(DataTable m_DataTable) { SaveFileDialog saveFile = new SaveFileDialog(); saveFile.Title = &quot;保存文件&quot;; saveFile.Filter = &quot;EXECL文件(*.xls) |*.xls |所有文件(*.*) |*.*&quot;; saveFile.FilterIndex = 1; if (saveFile.ShowDialog() == System.Windows.Forms.DialogResult.OK) { string FileName = saveFile.FileName; if (File.Exists(FileName)) { File.Delete(FileName); } FileStream objFileStream; StreamWriter objStreamWriter; string strLine = &quot;&quot;; objFileStream = new FileStream(FileName, FileMode.OpenOrCreate, FileAccess.Write); objStreamWriter = new StreamWriter(objFileStream, System.Text.Encoding.Unicode); for (int i = 0; i &lt; m_DataTable.Columns.Count; i++) { strLine = strLine + m_DataTable.Columns[i].Caption.ToString() + Convert.ToChar(9); } objStreamWriter.WriteLine(strLine); strLine = &quot;&quot;; for (int i = 0; i &lt; m_DataTable.Rows.Count; i++) { for (int j = 0; j &lt; m_DataTable.Columns.Count; j++) { if (m_DataTable.Rows[i].ItemArray[j] == null) { strLine = strLine + &quot; &quot; + Convert.ToChar(9); } else { string rowstr = &quot;&quot;; rowstr = m_DataTable.Rows[i].ItemArray[j].ToString(); if (rowstr.IndexOf(&quot;\\r\\n&quot;) &gt; 0) { rowstr = rowstr.Replace(&quot;\\r\\n&quot;, &quot; &quot;); } if (rowstr.IndexOf(&quot;\\t&quot;) &gt; 0) { rowstr = rowstr.Replace(&quot;\\t&quot;, &quot; &quot;); } strLine = strLine + rowstr + Convert.ToChar(9); } } objStreamWriter.WriteLine(strLine); strLine = &quot;&quot;; } objStreamWriter.Dispose(); objStreamWriter.Close(); objFileStream.Dispose(); objFileStream.Close(); System.Windows.Forms.MessageBox.Show(&quot;保存EXCEL成功&quot;, &quot;提示&quot;, MessageBoxButtons.OK, MessageBoxIcon.Information); } }","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"WPF知识点","slug":"WPF_Learning_1","date":"2021-01-20T16:30:00.000Z","updated":"2021-09-07T02:54:18.572Z","comments":true,"path":"DotNET/WPF_Learning_1/","link":"","permalink":"/DotNET/WPF_Learning_1/","excerpt":"2021首发","text":"2021首发 1. 首先写一个List转DataTable的方法public DataTable ListToDt&lt;T&gt;(IEnumerable&lt;T&gt; collection) { var props = typeof(T).GetProperties(); var dt = new DataTable(); dt.Columns.AddRange(props.Select(p =&gt; new DataColumn(p.Name, p.PropertyType)).ToArray()); if (collection.Count() &gt; 0) { for (int i = 0; i &lt; collection.Count(); i++) { ArrayList tempList = new ArrayList(); foreach (PropertyInfo pi in props) { object obj = pi.GetValue(collection.ElementAt(i), null); tempList.Add(obj); } object[] array = tempList.ToArray(); dt.LoadDataRow(array, true); } } return dt; } 然后定义一个listpublic List&lt;Teacher&gt; list = new List&lt;Teacher&gt;(); public class Teacher { public string Name { get; set; } public string Password { get; set; } } 方法内调用DataTable dt = ListToDt(list); DataView dv = new DataView(dt); 这样一个List就转成了DataView2. 然后是DataTable行转列的方法private DataTable SwapTable(DataTable tableData) { int intRows = tableData.Rows.Count; int intColumns = tableData.Columns.Count; //转二维数组 string[,] arrayData = new string[intRows, intColumns]; for (int i = 0; i &lt; intRows; i++) { for (int j = 0; j &lt; intColumns; j++) { arrayData[i, j] = tableData.Rows[i][j].ToString(); } } //下标对换 string[,] arrSwap = new string[intColumns, intRows]; for (int m = 0; m &lt; intColumns; m++) { for (int n = 0; n &lt; intRows; n++) { arrSwap[m, n] = arrayData[n, m]; } } DataTable dt = new DataTable(); //添加列 for (int k = 0; k &lt; intRows; k++) { dt.Columns.Add(new DataColumn(arrSwap[0, k])); } //添加行 for (int r = 1; r &lt; intColumns; r++) { DataRow dr = dt.NewRow(); for (int c = 0; c &lt; intRows; c++) { dr[c] = arrSwap[r, c].ToString(); } dt.Rows.Add(dr); } //添加行头 DataColumn ColRowHead = new DataColumn(tableData.Columns[0].ColumnName); dt.Columns.Add(ColRowHead); dt.Columns[ColRowHead.ColumnName].SetOrdinal(0); for (int i = 0; i &lt; intColumns - 1; i++) { dt.Rows[i][ColRowHead.ColumnName] = tableData.Columns[i + 1].ColumnName; } return dt; } 3. WPF获取选中某行的值/// &lt;summary&gt; /// 选中事件 /// &lt;/summary&gt; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt; private void dataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e) { DataRowView mySelectedItem = (DataRowView)dataGrid.SelectedItem; //判断有没有选中 if (mySelectedItem != null) { DataRow result = mySelectedItem.Row; DataTable dataTableNew = dataTable.Clone(); dataTableNew.ImportRow(result); this.dataGrid1.ItemsSource = new DataView(dataTableNew); } } 4. DataTable筛选数据DataRow[] dr = dataTable.Select(&quot;Name =&#39;张三&#39;&quot;, &quot;Time DESC&quot;); DataTable dataTableNew = dataTable.Clone(); for (int i = 0; i &lt; dr.Length; i++) { dataTableNew.ImportRow(dr[i]); } this.dataGrid1.ItemsSource = new DataView(dataTableNew); 5. TextBox实时更新Binding的PropertyText=&quot;{Binding SearchText,UpdateSourceTrigger=PropertyChanged}&quot;","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#获取指定文件夹所有文件","slug":"CSharp_File","date":"2020-12-30T17:00:00.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/CSharp_File/","link":"","permalink":"/DotNET/CSharp_File/","excerpt":"2020快过完了，赶紧水一篇博客","text":"2020快过完了，赶紧水一篇博客 //获取桌面路径 string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); string path = string.Format(@&quot;{0}\\{1}&quot;, desktop, &quot;加密前&quot;); DirectoryInfo folder = new DirectoryInfo(path); //从路径下循环获取文件 foreach(FileInfo file in folder.GetFiles()) { //打印文件路径到控制台 Console.WriteLine(file.FullName); } Console.ReadKey(); 控制台打印信息 很明显，这个打印的顺序就不对可以稍加修改一下，写入到txtstring desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); string path = string.Format(@&quot;{0}\\{1}&quot;, desktop, &quot;加密前&quot;); DirectoryInfo folder = new DirectoryInfo(path); StreamWriter txt; if (File.Exists(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;)) { //把原来的删掉重新创建一个 File.Delete(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;); txt = File.CreateText(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;); } else { //创建-&gt;路径.txt txt = File.CreateText(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;); } List&lt;string&gt; fileNameList = new List&lt;string&gt;(); foreach (FileInfo file in folder.GetFiles()) { //写入到list里面存储 fileNameList.Add(file.FullName); } //创建一个数组 string[] list=new string[fileNameList.Count]; //把list值加到数组 for(int i = 0; i &lt; fileNameList.Count; i++) { list[i] = fileNameList[i]; } //调用排序方法 Array.Sort(list, new FileNameSort()); foreach(var fileUrl in list) { //写入txt txt.WriteLine(fileUrl); Console.WriteLine(fileUrl); } //释放资源 txt.Close(); txt.Dispose(); Console.ReadKey(); 这里说一下为啥要创建list和数组因为看上图顺序是乱的，所以就排序了一下 这一次就没问题了 包括文本写入也正常排序的方法public class FileNameSort : IComparer { //调用windos 的 DLL [System.Runtime.InteropServices.DllImport(&quot;Shlwapi.dll&quot;, CharSet = CharSet.Unicode)] private static extern int StrCmpLogicalW(string param1, string param2); //前后文件名进行比较。 public int Compare(object name1, object name2) { if (null == name1 &amp;&amp; null == name2) { return 0; } if (null == name1) { return -1; } if (null == name2) { return 1; } return StrCmpLogicalW(name1.ToString(), name2.ToString()); } }","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"Windows服务器搭建私人GitLab","slug":"GitLab_Windows10","date":"2020-10-11T21:00:00.000Z","updated":"2021-09-07T02:54:18.478Z","comments":true,"path":"Other/GitLab_Windows10/","link":"","permalink":"/Other/GitLab_Windows10/","excerpt":"记录一下Windows服务器搭建私人GitLab","text":"记录一下Windows服务器搭建私人GitLab Windows服务器搭建GitLab需要安装Java环境Java环境下载Gitblit-1.9.1.zip 下载JavaJDK并配置环境此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;添加变量名：JAVA_HOME 变量值：电脑上JDK安装的绝对路径 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 选择path这一列点编辑 然后新增两行 %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin 打开cmd输入java -version查看版本号，没有错误说明安装成功打开data文件夹编辑找到defaults.properties配置文件# 设置版本库的位置 git.repositoriesFolder = 你要的路径 # 设置端口号 server.httpPort = 端口号 # 设置ip地址 server.httpBindInterface = 本机ipv4 server.certificateAlias = localhost 修改installService.cmd文件@REM arch = x86, amd64, or ia32 SET ARCH=amd64 SET CD = C:\\WebFile\\GitLab --(GitLab解压后的路径) 然后在命令窗口运行gitlab.cmd（切记cmd窗口不能关闭）最后以管理员账号登陆，就可以自己添加存储库了，然后自行拉取提交推送","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":".NET Core WebAPI使用EFCore连接MySQL","slug":"DotNETCore_WebAPI_EFCore_MySQL","date":"2020-07-09T18:00:00.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/DotNETCore_WebAPI_EFCore_MySQL/","link":"","permalink":"/DotNET/DotNETCore_WebAPI_EFCore_MySQL/","excerpt":"记录一下.NET Core使用EFCore连接MySQL数据库","text":"记录一下.NET Core使用EFCore连接MySQL数据库 首先从nuget包里面找到MySQL.Data.EntityFrameworkCore进行安装 因为我的.NET Core是最新版本3.1，所以这个EFCore我安装的也是最新版本8.0.20第一步在配置文件appsettings.json里面添加连接字符串&quot;ConnectionStrings&quot;: { &quot;MySQLConnection&quot;: &quot;server=本地或者线上地址;uid=用户名;pwd=密码;port=端口号;database=需要连接的数据库名称;SslMode=None&quot; } 第二步添加数据库上下文类public class EFCoreDbContext:DbContext { public virtual DbSet&lt;UserInfo&gt; Users { get; set; } //将实体类添加Context中 public EFCoreDbContext(DbContextOptions&lt;EFCoreDbContext&gt; options) : base(options) { } } 第三步Startup.cs里面的ConfigureServices方法下面读取服务添加到容器services.AddDbContext&lt;EFCoreDbContext&gt;(options =&gt; options.UseMySQL(Configuration.GetConnectionString(&quot;MySQLConnection&quot;))); 最后在需要使用到数据库的控制器内添加构造函数，初始化数据库上下文类/// &lt;summary&gt; /// 初始化数据库上下文 /// &lt;/summary&gt; private readonly EFCoreDbContext _efCoreDbContext; /// &lt;summary&gt; /// 构造及初始化类参数 /// &lt;/summary&gt; public ImageController(EFCoreDbContext coreDbContext) { _efCoreDbContext = coreDbContext; } 最后接口通过上下文类取出相应的数据，如果数据不为空则连接成功2021年6月29日重新打开项目发现MySql.Data.EntityFrameworkCore已弃用把这个Nuget包删掉安装MySQL.EntityFrameworkCore就好了","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":".NET Core WebAPI全局异常处理","slug":"DotNETCore_WebAPI_Exception","date":"2020-07-03T16:00:00.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/DotNETCore_WebAPI_Exception/","link":"","permalink":"/DotNET/DotNETCore_WebAPI_Exception/","excerpt":"今天记录一下.NET Core WebAPI的全局异常处理","text":"今天记录一下.NET Core WebAPI的全局异常处理 上代码，先创建一个类，命名就叫ExceptionFilter继承于ExceptionFilterAttributepublic class ExceptionFilter:ExceptionFilterAttribute { public override void OnException(ExceptionContext context) { if (!context.ExceptionHandled) { context.Result = new JsonResult(new { Code = &quot;500&quot;, Res = new { Data = context.Exception.Message, Msg = &quot;接口发生错误&quot; } }); context.ExceptionHandled = true; } } } 然后在Startup类下面的ConfigureServices方法下面全局注册一下// 此方法由运行时调用，使用此方法将服务添加到容器 public void ConfigureServices(IServiceCollection services) { services.AddControllers(); //全局配置Json序列化大小写处理 services.AddMvc().AddJsonOptions(options =&gt; { options.JsonSerializerOptions.PropertyNamingPolicy = null; options.JsonSerializerOptions.DictionaryKeyPolicy = null; }); //全局注册异常类 services.AddMvc(options =&gt; { options.Filters.Add&lt;ExceptionFilter&gt;(); }); //解决中文被编码 services.AddControllersWithViews().AddJsonOptions(options =&gt; { options.JsonSerializerOptions.Encoder = JavaScriptEncoder.Create(UnicodeRanges.All); }); } 为了防止返回的Json大小写不匹配，我还加了Json大小写处理，确定Json输出和后台定义的格式以及大小写一致，和返回的中文乱码情况在接口报错的时候会返回后台固定的Code，用来判断接口状态","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":".NET Core 部署IIS","slug":"DotNETCore_IIS","date":"2020-06-10T15:30:00.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/DotNETCore_IIS/","link":"","permalink":"/DotNET/DotNETCore_IIS/","excerpt":"记录.NET Core部署IIS遇到的坑","text":"记录.NET Core部署IIS遇到的坑 VS2019发布项目到文件夹，然后拷贝到服务器，这些正常流程结束后访问api，出现以下情况第一种500错误 第二种502错误 百度了很多得到以下解决方案点击下载：dotnet-hosting-3.1.5-win.exe 下载并且安装.NET Core托管捆绑包安装程序重新启动IIS或者重新添加网站，发布启动即可访问成功","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"MySQL和SQL Server存储过程","slug":"MySQL_MSSQL_Stored_Procedure","date":"2020-05-11T17:40:00.000Z","updated":"2021-09-07T02:54:18.494Z","comments":true,"path":"SQL/MySQL_MSSQL_Stored_Procedure/","link":"","permalink":"/SQL/MySQL_MSSQL_Stored_Procedure/","excerpt":"记录一下数据库存储过程","text":"记录一下数据库存储过程 MySQL创建带条件查询的存储过程DELIMITER $$ CREATE PROCEDURE `数据库名`.`存储过程名`(IN 自定义参数 VARCHAR(200)) BEGIN SELECT * FROM 表名 WHERE 字段 = 自定义参数; END$$ DELIMITER ; 调用并传参CALL 存储过程名(&#39;参数值&#39;) 删除存储过程DROP PROCEDURE 存储过程名 SQL Server创建带条件查询的存储过程create proc 存储过程名 @自定义参数 varchar(200) as select * from 表名 where 字段=@自定义参数 go 调用并传参EXEC 存储过程名 &#39;参数值&#39; 删除存储过程drop proc 存储过程名","categories":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}]},{"title":"vue+elementui遇到的坑","slug":"Vue_Learning_2","date":"2020-04-24T21:30:00.000Z","updated":"2021-09-07T02:54:18.572Z","comments":false,"path":"Vue/Vue_Learning_2/","link":"","permalink":"/Vue/Vue_Learning_2/","excerpt":"入门vue，第二篇","text":"function doDecrypt (pwd, onError) { const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById(\"enc_error\").innerHTML = \"密码不对哦!\" }; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; doDecrypt(passwd, onError); }","categories":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}]},{"title":"学习vue遇到的坑","slug":"Vue_Learning_1","date":"2020-04-23T16:25:00.000Z","updated":"2021-09-07T02:54:18.572Z","comments":false,"path":"Vue/Vue_Learning_1/","link":"","permalink":"/Vue/Vue_Learning_1/","excerpt":"入门Vue，第一篇","text":"function doDecrypt (pwd, onError) { const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById(\"enc_error\").innerHTML = \"密码不对哦!\" }; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; doDecrypt(passwd, onError); }","categories":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}]},{"title":"MVC连接MySQL教程","slug":"MySQL_MVC5_EF6","date":"2020-04-14T16:16:16.000Z","updated":"2021-09-07T02:54:18.494Z","comments":true,"path":"SQL/MySQL_MVC5_EF6/","link":"","permalink":"/SQL/MySQL_MVC5_EF6/","excerpt":"记录一下MVC+EF连接MySQL数据库需要安装的插件","text":"记录一下MVC+EF连接MySQL数据库需要安装的插件 准备以下文件 点击下载：mysql-connector-net-6.9.12.msi 点击下载：mysql-for-visualstudio-1.2.8.msi MySQL Data和MySQL Data Entity（NuGet进行安装，这边装的版本都是6.9.12） 在model文件夹右击添加新建项，选择ADO.NET实体数据模型 选择来自数据库的EF设计器 新建连接，更改数据源，选择MySQL Database，连接MySQL服务器 注意：这里如果下一步时，出现闪退，则要检查MySQL Data和MySQL Data Entity版本。选择所有表 然后点击完成即可生成","categories":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}]},{"title":"C# Reamrk特性","slug":"CSharp_Remark_Attribute","date":"2020-04-03T11:11:11.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/CSharp_Remark_Attribute/","link":"","permalink":"/DotNET/CSharp_Remark_Attribute/","excerpt":"Remark特性的应用场景","text":"Remark特性的应用场景 场景一：用户状态的枚举值，定义的是英文的字段，需要输出中文含义。枚举定义如下：public enum UserState { /// &lt;summary&gt; /// 正常 /// &lt;/summary&gt; Normal = 0, /// &lt;summary&gt; /// 冻结 /// &lt;/summary&gt; Frozen = 1, /// &lt;summary&gt; /// 删除 /// &lt;/summary&gt; Deleted = 2 } 普通做法：根据枚举值进行判断，然后输出中文含义：UserState userState = UserState.Normal; switch (userState) { case UserState.Deleted: Console.WriteLine(&quot;删除&quot;); break; case UserState.Normal: Console.WriteLine(&quot;正常&quot;); break; case UserState.Frozen: Console.WriteLine(&quot;冻结&quot;); break; } 这种写法违反开不原则，不利于以后的扩展，下面使用特性实现先定义Remark特性：using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace TianciAttribute { /// &lt;summary&gt; /// 特性 /// &lt;/summary&gt; public class RemarkAttribute: Attribute { private string _Remark = null; /// &lt;summary&gt; /// 有参构造函数 /// &lt;/summary&gt; /// &lt;param name=&quot;remark&quot;&gt;&lt;/param&gt; public RemarkAttribute(string remark) { this._Remark = remark; } public string GetRemark() { return _Remark; } } } UserState枚举修改如下：public enum UserState { /// &lt;summary&gt; /// 正常 /// &lt;/summary&gt; [Remark(&quot;正常&quot;)] Normal = 0, /// &lt;summary&gt; /// 冻结 /// &lt;/summary&gt; [Remark(&quot;冻结&quot;)] Frozen = 1, /// &lt;summary&gt; /// 删除 /// &lt;/summary&gt; [Remark(&quot;删除&quot;)] Deleted = 2 } 写一个扩展方法，对Enum类型进行扩展：using System; using System.Collections.Generic; using System.Linq; using System.Reflection; using System.Text; using System.Threading.Tasks; namespace TianciAttribute { public static class RemarkExtension { /// &lt;summary&gt; /// Enum的扩展方法，静态类，静态方法，第一个参数前面添加this /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static string GetRemark(this Enum value) { //获取类型 Type type = value.GetType(); //获取字段 FieldInfo fieId = type.GetField(value.ToString()); //判断字段上面是否定义了ReamrkAttribute特性 if (fieId.IsDefined(typeof(RemarkAttribute))) { //创建实例 RemarkAttribute attribute = (RemarkAttribute)fieId.GetCustomAttribute(typeof(RemarkAttribute)); return attribute.GetRemark(); } else { return value.ToString(); } } } } 最后Main()方法里面调用using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace TianciAttribute { class Program { static void Main(string[] args) { UserState userState = UserState.Normal; Console.WriteLine(userState.GetRemark()); Console.ReadKey(); } } } 输出结果","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#理论面试题","slug":"CSharp_Interview_ques_2","date":"2020-03-06T13:14:20.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/CSharp_Interview_ques_2/","link":"","permalink":"/DotNET/CSharp_Interview_ques_2/","excerpt":"这次的面试题大多为理论知识","text":"这次的面试题大多为理论知识 1. 数组有没有length()方法，String有没有length()方法？string[] sz = { &quot;1&quot;, &quot;2&quot;, &quot;3&quot; }; Console.WriteLine(sz.Length); String a = &quot;1&quot;; Console.WriteLine(a.Length); 很明显这两个都有length()方法2. 谈谈final，finally，finalize的区别final ：修饰符（关键字）如果类被声明为final,就不能再派生新的子类也不能作为父类被继承 finally ：在异常处理时提供finally块来执行操作，不管有没有异常，finally里面的代码始终会被执行 finalize ：方法名，finalize是在Object类中定义的，所有的类都继承了它 3. 如何处理几十万条并发数据使用缓存，访问过的数据不需要二次访问数据库 数据库使用存储过程，尽量分页 使用多线程分批次处理 4. 堆和栈的区别栈：由编译器自动分配、释放，在函数体中定义的变量通常在栈上 堆：由程序员分配释放，用new、malloc分配内存函数得到的就是在堆上 5. 成员变量和成员函数前加static的作用它们被称为常成员变量和常成员函数，又称为类成员变量和类成员函数，分别用来反映类的状态， 比如类成员变量可以用来统计类实例的数量，类成员函数负责这种统计的动作 6. C#可否直接对内存进行操作C#可以直接对内存进行操作。但是默认情况下，为了保持类型安全，C#不支持指针运算 但是可以通过使用unsafe关键字，定义可使用指针的不安全代码 7. Const和ReadOnly？Const关键字用来声明编译时常量 ReadOnly用来声明运行时常量 8. String和StringBuffer的区别和优缺点String类表示内容不可改变的字符串 StringBuffer类表示内容可以被修改的字符串 StringBuffer的执行速度要大于String 9.什么是值类型，什么是引用类型？值类型（value type）：byte，short，int，long，float，double，decimal，char，bool 和 struct 统称为值类型。值类型变量声明后，不管是否已经赋值，编译器为其分配内存。 引用类型（reference type）：string 和 class统称为引用类型。当声明一个类时，只在栈中分配一小片内存用于容纳一个地址，而此时并没有为其分配堆上的内存空间。当使用 new 创建一个类的实例时，分配堆上的空间，并把堆上空间的地址保存到栈上分配的小片空间中。 先到这里吧！","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"/tags/面试题/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#常见算法题","slug":"CSharp_Interview_ques_1","date":"2020-03-03T10:20:30.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/CSharp_Interview_ques_1/","link":"","permalink":"/DotNET/CSharp_Interview_ques_1/","excerpt":"记录一下遇到过的面试题","text":"记录一下遇到过的面试题 打印出2000-2500之间所有的闰年年份1.年份必须为4的倍数for (int a = 2000; a &lt;= 2500; a++) { if (a % 4 == 0) { Console.WriteLine(a); } } 打印出1+2!+3!+…+20!的和，就是1-20的阶乘之和第一种方法static void Main(string[] args) { int sum = 0; for (int i = 1; i &lt;= 20; i++) { sum += jieCheng(i); } Console.WriteLine(sum); Console.ReadKey(); } static int jieCheng(int n) { if (n == 1) { return 1; } else { return n * jieCheng(n - 1); } } 第二种方法int sum = 0; int n = 20; for (int i = 1; i &lt;= n; i++) { int temp = 1; for (int j = 1; j &lt;= i; j++) { temp *= j; } sum += temp; } Console.WriteLine(sum); Console.ReadKey(); 写出一个方法，参数是三个整数（x,y,z），按从小到大排序第一种使用数组自带的排序static void PaiXu(int x, int y, int z) { int[] num = new int[3]; num[0] = x; num[1] = y; num[2] = z; Array.Sort(num); Console.WriteLine(&quot;从小到大结果依次为：&quot;); for (int i = 0; i &lt; num.Length; i++) { Console.WriteLine(num[i]); } } 如果题目要求从用户输入的三个整数来进行排序的话，可以这样写int[] num = new int[3]; Console.WriteLine(&quot;请输入三个整数&quot;); for (int i = 0; i &lt; num.Length; i++) { Console.WriteLine(&quot;请输入第{0}个数字&quot;, i + 1); num[i] = Convert.ToInt32(Console.ReadLine()); } //从小到大排序 Array.Sort(num); Console.WriteLine(&quot;数字从小到大依次为：&quot;); for (int i = 0; i &lt; num.Length; i++) { Console.WriteLine(num[i]); } Console.ReadKey(); 1，1，2，3，5，8，…获取第30个数值没有规定的话这个方便理解int[] list = new int[30]; list[0] = 1; list[1] = 1; for (int i = 2; i &lt; 30; i++) { list[i] = list[i - 1] + list[i - 2]; Console.WriteLine(list[i]); } Console.ReadKey(); 必须使用递归的话可以这样写static void Main(string[] args) { for (int i = 0; i &lt; 30; i++) { Console.WriteLine(GetNum(i)); } Console.ReadKey(); } static int GetNum(int n) { if (n == 0 || n == 1) { return 1; } else { return GetNum(n - 1) + GetNum(n - 2); } } 最经典的冒泡排序int tem = 0; int[] list = { 1, 23, 12, 421, 31, 213, 42 }; for (int i = 0; i &lt; list.Length - 1; i++) { for (int j = 0; j &lt; list.Length - 1 - i; j++) { if (list[j] &gt; list[j + 1]) { tem = list[j]; list[j] = list[j + 1]; list[j + 1] = tem; } } } Console.ReadKey(); 产生一个int数组，长度为100，并向其中随即插入1-100，且不能重复List&lt;int&gt; lst = new List&lt;int&gt;(); Random r = new Random(); while (true) { int temp = r.Next(1, 101); if (lst.Count == 100) { break; } if (!lst.Contains(temp)) { lst.Add(temp); } } for (int i = 0; i &lt; lst.Count; i++) { Console.WriteLine(lst[i]); } Console.ReadKey(); 打印九九乘法表int i, j; for (i = 1; i &lt;= 9; i++) { for (j = 1; j &lt;= i; j++) { Console.Write(&quot;{0}*{1}={2,2} &quot;, j, i, j * i); } Console.WriteLine(); } Console.ReadKey(); 无师自通的水仙花数，两种方式都可以取个十百位for (int i = 100; i &lt; 1000; i++) { //int n1 = i / 100 % 10;//百位 //int n2 = i / 10 % 10; //十位 //int n3 = i % 10;//个位 string num = i.ToString(); int n1 = int.Parse(num[0].ToString());//百位 int n2 = int.Parse(num[1].ToString());//十位 int n3 = int.Parse(num[2].ToString());//个位 if (n1 * n1 * n1 + n2 * n2 * n2 + n3 * n3 * n3 == i) { Console.WriteLine(i); } } 行了行了就这样吧！！！","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"/tags/面试题/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#扩展方法","slug":"CSharp_Extension","date":"2020-02-10T22:00:00.000Z","updated":"2021-09-07T02:54:18.463Z","comments":true,"path":"DotNET/CSharp_Extension/","link":"","permalink":"/DotNET/CSharp_Extension/","excerpt":"C#扩展方法","text":"C#扩展方法 定义1. 声明扩展方法的类必须为static类；2. 扩展方法本身也必须声明为static；3. 扩展方法必须包含关键字this作为第一个参数类型，并在后面跟着它所扩展的类型的名称。开始操作先创建一个静态类叫StringExtension然后简单写一个静态方法，我这里写的是布尔，用来判断入参是否等于1控制器导入扩展方法所在的类的命名空间，限制扩展方法的使用public static class StringExtension { /// &lt;summary&gt; /// Remark：判断输入的是不是1 /// &lt;/summary&gt; /// &lt;param name=&quot;input&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsOne(this int input) { if (input == 1) { return true; } return false; } } 接口调用方法，传参为1，返回true 总结- 扩展方法必须定义在静态类中，扩展方法本身也是静态方法，扩展方法也可以重载。- 如果扩展方法和对应的类位于不同的命名空间，使用时应引入扩展方法所在静态类的命名空间。- 当类本身的方法与扩展方法重名时，类本身的方法被优先调用。（建议通过命名空间的方式来限制扩展方法的使用）- 扩展方法不要过多使用。尤其是系统定义的类，不要随意增加扩展方法。","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"WebAPI全局异常处理","slug":"WebAPI_Exception","date":"2020-02-03T21:21:21.000Z","updated":"2021-09-07T02:54:18.588Z","comments":true,"path":"DotNET/WebAPI_Exception/","link":"","permalink":"/DotNET/WebAPI_Exception/","excerpt":"记录一下WebAPI的全局异常处理","text":"记录一下WebAPI的全局异常处理 通常接口出现一些小错误，页面会返回一堆看不懂的代码这对于我们寻找错误并没有什么太大的帮助，反而看着很难受 遇到这种情况我们可以写一个全局异常过滤器，接口报错直接跳到过滤器首先新建一个ActionFilter类，继承至ExceptionFilterAttribute代码如下/// &lt;summary&gt; /// Remark:过滤掉WebApi接口的异常，统一返回异常信息 /// &lt;/summary&gt; public class ActionFilter : ExceptionFilterAttribute { public override void OnException(HttpActionExecutedContext context) { //记录错误日志 //LogHelper.Error($&quot;{context.Exception }&quot;, context.Request.RequestUri.AbsolutePath); //篡改Response context.Response = new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(JsonConvert.SerializeObject(new { code = &quot;520&quot;, res = new { msg = &quot;接口有问题&quot; } })) }; } } 然后在WebApiConfig类里面全局配置public static class WebApiConfig { public static void Register(HttpConfiguration config) { // Web API 配置和服务 // Web API 路由 config.MapHttpAttributeRoutes(); config.Routes.MapHttpRoute( name: &quot;DefaultApi&quot;, routeTemplate: &quot;api/{controller}/{id}&quot;, defaults: new { id = RouteParameter.Optional } ); //全局注册异常过滤器 config.Filters.Add(new ActionFilter()); } } 只要接口出现异常就会跳到这个地方，返回我们定义的信息 可以看到，尽管接口已经抛出异常了，但是网页返回的信息依旧是我所定义的错误信息可以打印到日志，避免接口信息泄露，具体打印日志下期再说学业繁忙，告辞","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"Hexo文件操作","slug":"Hexo_Command","date":"2020-01-13T20:00:00.000Z","updated":"2021-09-07T02:54:18.478Z","comments":true,"path":"Hexo/Hexo_Command/","link":"","permalink":"/Hexo/Hexo_Command/","excerpt":"搭建Hexo静态博客难免会遇到小问题","text":"搭建Hexo静态博客难免会遇到小问题 今天讲一下遇到的一些小坑，以及解决办法通常博客里面会有一些其他小页面，不是由hexo生成的页面，例如life文件夹 那么这些页面放到public文件夹内，每次hexo clean都会被清除掉然后也不会上传到git，那么这个应该怎么解决呢其实直接把文件夹拖到hexo下面的source下面跟_posts文件夹同级就行了 这样的话每次生成和上传就都会带上这个文件夹了但是又遇到一个新问题，这是单独的页面每次重新生成都会渲染上hexo的主题样式会导致这个单独的页面内容跑版，怎么办呢其实很简单，找到_config.yml下面的skip_render改成这个样子，life为你的文件夹名 这样就大功告成了！！！","categories":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}]},{"title":"Hexo安装与部署","slug":"Hexo_Setup","date":"2020-01-12T12:00:00.000Z","updated":"2021-09-07T02:54:18.478Z","comments":true,"path":"Hexo/Hexo_Setup/","link":"","permalink":"/Hexo/Hexo_Setup/","excerpt":"打开Git Bash，输入以下代码安装hexo","text":"打开Git Bash，输入以下代码安装hexo $ npm install -g hexo 安装完成在任意盘创建文件夹，例如D:\\hexo再右击打开Git Bash，输入$ cd D:\\hexo $ hexo init hexo会自动下载一些文件到这个目录然后继续输入$ npm install hexo-deployer-git 这个是因为等下提交代码需要此插件现在生成网站并预览$ hexo g $ hexo s 进入浏览器输入localhost:4000访问你的网站吧，Ctrl+C停止预览在网上下一个主题然后放进hexo文件夹下面的theme文件夹里面修改hexo文件夹中_config.yml文件里面的theme属性将原来的landscape改为你所下载主题的文件夹名，打开Git Bash重新生成并预览$ hexo g $ hexo s 你会发现页面已经适应了你的主题之后打开hexo目录下的_config.yml最后一段 绑定你的GitHub项目地址$ hexo clean $ hexo g $ hexo d 以上代码分别是清除public文件夹，重新生成，和提交代码到GitHub然后上GitHub你会发现存储库里面的文件都是public文件夹下面的每次提交代码都只会提交此文件夹下的代码本期hexo安装与部署就到这里，下期见","categories":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}]},{"title":"诗词欣赏","slug":"UpdateInfo","date":"2020-01-09T22:22:22.000Z","updated":"2021-09-07T02:54:18.572Z","comments":true,"path":"Other/UpdateInfo/","link":"","permalink":"/Other/UpdateInfo/","excerpt":"","text":"你说帘外海棠，锦屏鸳鸯；后来庭院春深，咫尺画堂 你说笛声如诉，费尽思量；后来茶烟尚绿，人影茫茫 你说可人如玉，与子偕臧；后来长亭远望，夜色微凉 你说霞染天光，陌上花开与谁享；后来烟笼柳暗，湖心水动影无双 你说彼岸灯火，心之所向；后来渔舟晚唱，烟雨彷徨 你说水静莲香，惠风和畅；后来云遮薄月，清露如霜 你说幽窗棋罢，再吐衷肠；后来风卷孤松，雾漫山冈 你说红袖佯嗔，秋波流转思张敞；后来黛眉长敛，春色飘零别阮郎 你说暗香浮动，刹那光芒；后来玉殒琼碎，疏影横窗 你说良辰美景，乘兴独往；后来红尘紫陌，雪落太行 你说赋尽高唐，三生石上；后来君居淄右，妾家河阳 你说玉楼朱颜，飞月流觞迎客棹；后来幽谷居士，枕琴听雨卧禅房 你说高山流水，客答春江；后来章台游冶，系马垂杨 你说锦瑟韶光，华灯幢幢；后来荼蘼开至，青苔满墙 你说天地玄黄，风月琳琅；后来月斜江上，云淡天长 你说兰舟轻发，西楼月下忆姣娘；后来江湖两忘，只影天涯踏秋殇 你说幽谷听溪，寻芳清岗，后来落花丁零，水涸潇湘 你说霜冷长河，蒹葭苍苍，后来伊人何在？孤坐未央 你说月洒寒江，玉柱琼梁，后来冷镜残钩，三更榻凉 你说梦呓故园，桃花水里游鸳鸯；后来千山暮雪，老翅几回自奔忙","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"/tags/娱乐/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"博客正式上线","slug":"MyFirstBlog","date":"2020-01-05T22:22:22.000Z","updated":"2021-09-07T02:54:18.478Z","comments":true,"path":"Other/MyFirstBlog/","link":"","permalink":"/Other/MyFirstBlog/","excerpt":"前言TianciBlog于2020-01-05正式上线","text":"前言TianciBlog于2020-01-05正式上线 惹不住题诗一首故人西辞富士康为学技术到蓝翔蓝翔科技包分配分配又到富士康故人二辞富士康转身就去新东方苦练三年当大厨做饭还在富士康故人三辞富士康为了生活上武当武当出来包分配富士康里当门卫","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"/tags/娱乐/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]}]}
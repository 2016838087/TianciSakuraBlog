{"meta":{"title":"TianciBlog","subtitle":"Tianciの小窝","description":"Tianciの小窝,Tianci个人博客,TianciBlog","author":"Tianci","url":""},"pages":[{"title":"关于","date":"2022-06-07T02:06:18.558Z","updated":"2022-06-07T02:06:18.558Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"关于博🐷 与&nbsp; Tianci&nbsp; 对话中... bot_ui_ini()"},{"title":"留言板","date":"2022-06-07T02:06:18.574Z","updated":"2022-06-07T02:06:18.574Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"吟诗一首","keywords":"留言板"},{"title":"友链","date":"2022-06-07T02:06:18.605Z","updated":"2022-06-07T02:06:18.605Z","comments":false,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":""},{"title":"心情","date":"2022-06-07T02:06:18.605Z","updated":"2022-06-07T02:06:18.605Z","comments":false,"path":"mood/index.html","permalink":"/mood/index.html","excerpt":"","text":"new Artitalk({ appId: '5H7AydmPGv5z6GjvxW088cDJ-MdYXbMMI', // Your leancloud appId appKey: '3OgRwXUWbmNx1WhFlSs7ek6V', // Your leancloud appKey atEmoji: { \"滑稽\": \"https://fastly.jsdelivr.net/gh/moezx/cdn@3.1.9/img/Sakura/images/smilies/icon_huaji.gif\", \"汗\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200411023456.webp\", \"点赞\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/kawayi.webp\", \"傲娇\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200409103906.webp\", \"开心\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200409104757.webp\", \"扣手手\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200409130304.webp\", \"仙女下凡\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200409130301.webp\", \"得瑟\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200409130258.webp\", \"揉左脸\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200409130254.webp\", \"揉右脸\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200409130249.webp\", \"彩虹滑稽\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/caihongtiao.webp\", \"呆滞\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/daizhi.webp\", \"躲进小被子\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/djxbz.webp\", \"拽走小被子\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/zzxbz.webp\", \"干\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/gan.webp\", \"给我也整一个\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/gwyzyg.webp\", \"害怕\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/hp.webp\", \"怀疑\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200412095314.webp\", \"草\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/imgcao.webp\", \"花\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/imghua.webp\", \"日\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/imgri.webp\", \"叶\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/imgye.webp\", \"夹住\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/kz.webp\", \"目瞪狗呆\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/20200412095243.webp\", \"劈叉\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/pc.webp\", \"踢楼上屁股\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/tlspg.webp\", tql: \"https://fastly.jsdelivr.net/gh/drew233/cdn/tql.webp\", \"无语\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/wuyu.webp\", \"转圈圈\": \"https://fastly.jsdelivr.net/gh/drew233/cdn/zqq.webp\" }, })"},{"title":"","date":"2022-06-07T02:06:18.605Z","updated":"2022-06-07T02:06:18.605Z","comments":true,"path":"mood/css/style.css","permalink":"/mood/css/style.css","excerpt":"","text":"#shuoshuo_content { background-color: #fff; padding: 10px; min-height: 500px; } /* shuo */ body.theme-dark .cbp_tmtimeline::before { background: RGBA(255, 255, 255, 0.06); } ul.cbp_tmtimeline { padding: 0; } div class.cdp_tmlabel > li .cbp_tmlabel { margin-bottom: 0; } .cbp_tmtimeline { margin: 30px 0 0 0; padding: 0; list-style: none; position: relative; } /* The line */ .cbp_tmtimeline:before { content: ''; position: absolute; top: 0; bottom: 0; width: 4px; background: RGBA(0, 0, 0, 0.02); left: 80px; margin-left: 10px; } /* The date/time */ .cbp_tmtimeline > li .cbp_tmtime { display: block; /* width: 29%; */ /* padding-right: 110px; */ max-width: 70px; position: absolute; } .cbp_tmtimeline > li .cbp_tmtime span { display: block; text-align: right; } .cbp_tmtimeline > li .cbp_tmtime span:first-child { font-size: 0.9em; color: #bdd0db; } .cbp_tmtimeline > li .cbp_tmtime span:last-child { font-size: 1.2em; color: #9BCD9B; } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmtime span:last-child { color: RGBA(255, 125, 73, 0.75); } div.cbp_tmlabel > p { margin-bottom: 0; } /* Right content */ .cbp_tmtimeline > li .cbp_tmlabel { margin: 0 0 45px 65px; background: #9BCD9B; color: #fff; padding: .8em 1.2em .4em 1.2em; /* font-size: 1.2em; */ font-weight: 300; line-height: 1.4; position: relative; border-radius: 5px; transition: all 0.3s ease 0s; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15); cursor: pointer; display: block; /* 禁用点击事件 */ /* pointer-events:none; */ } .cbp_tmlabel:hover { /* transform:scale(1.05); */ transform: translateY(-3px); z-index: 1; box-shadow: 0 15px 32px rgba(0, 0, 0, 0.15) !important } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmlabel { background: RGBA(255, 125, 73, 0.75); } /* The triangle */ .cbp_tmtimeline > li .cbp_tmlabel:after { right: 100%; border: solid transparent; content: \" \"; height: 0; width: 0; position: absolute; pointer-events: none; border-right-color: #9BCD9B; border-width: 10px; top: 4px; } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmlabel:after { border-right-color: RGBA(255, 125, 73, 0.75); } p.shuoshuo_time { margin-top: 10px; border-top: 1px dashed #fff; padding-top: 5px; } /* Media */ @media screen and (max-width: 65.375em) { .cbp_tmtimeline > li .cbp_tmtime span:last-child { font-size: 1.2em; } } .shuoshuo_author_img img { border: 1px solid #ddd; padding: 2px; float: left; border-radius: 64px; transition: all 1.0s; } .avatar { border-radius: 100% !important; -moz-border-radius: 100% !important; box-shadow: inset 0 -1px 0 3333sf; -webkit-box-shadow: inset 0 -1px 0 3333sf; -webkit-transition: 0.4s; -webkit-transition: -webkit-transform 0.4s ease-out; transition: transform 0.4s ease-out; -moz-transition: -moz-transform 0.4s ease-out; } .zhuan { transform: rotateZ(720deg); -webkit-transform: rotateZ(720deg); -moz-transform: rotateZ(720deg); } /* end */"}],"posts":[{"title":"南山南","slug":"Nanshan_South","date":"2022-05-18T14:00:00.000Z","updated":"2022-06-07T02:06:18.511Z","comments":true,"path":"Other/Nanshan_South/","link":"","permalink":"/Other/Nanshan_South/","excerpt":"","text":"你去了南方以南，在落不下雪花的烈日里，在冷暖中挣扎。在热闹时沉默，在喧嚣里寂寞，在艳阳里大雪纷飞 我还是一直蜷缩在北方，睡在大雪纷飞的寒夜里。再没有关心花开叶落，生活无澜无波；再没有什么人走进来，也没有什么人离开，一切平淡的就像一个普通的春天 我做着连续剧一样的梦，可它始终没有结果。每个夜里都能看到星星，每次闭眼也都能看到你的眼睛。我想我已经来不及忘掉你，也做不完那个梦 两个人在一起，就像两个孤岛在深海里相遇。这话，我再也没和任何人提起 有些人的心是只能耕一次的地，一次过后，荒无人烟，杂草遍地 我给自己讲了一些谎话，它们能骗过了我自己。但别人问起来，我就笑着装哑巴 你任何为人称道的美丽，不及我第一次遇见你。我苟延残喘在初遇的那一刻，醒来却深陷无力，无可奈何 如果这大山大川都变成平地，如果这大海大河都连在一起，那我就走上一生去抱住你 如果，你还是当初的那个你 我自己哼唱着古老的歌，唱着当时的爱情和今天的你我。我们交错而过，继续化作孤岛，在大海中漂流。再没有悲伤，也没有欢乐 那片荒地上，立着孤零零的一个墓碑，碑下埋着梦，碑上刻着我 大梦初醒，荒唐了这一生 我醉了，晚安。","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"/tags/娱乐/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"LeetCode部分算法题","slug":"LeetCode","date":"2022-05-18T13:35:00.000Z","updated":"2022-06-07T02:06:18.402Z","comments":true,"path":"Other/LeetCode/","link":"","permalink":"/Other/LeetCode/","excerpt":"刷过LeetCode才发现自己的基础是这么的烂","text":"刷过LeetCode才发现自己的基础是这么的烂 /// &lt;summary&gt; /// LeetCode两数之和 /// &lt;/summary&gt; /// &lt;param name=&quot;nums&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;target&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int[] TwoSum(int[] nums, int target) { for (int i = 0; i &lt; nums.Length; i++) { for (int j = 0; j &lt; nums.Length; j++) { if (i != j) { if (nums[i] + nums[j] == target) { return new int[] { i, j }; } } } } return null; } public class ListNode { public int val; public ListNode next; public ListNode(int val = 0, ListNode next = null) { this.val = val; this.next = next; } } /// &lt;summary&gt; /// LeetCode两数相加（抄来的并且已经提交） /// &lt;/summary&gt; /// &lt;param name=&quot;l1&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;l2&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static ListNode AddTwoNumbers(ListNode l1, ListNode l2) { ListNode dummyHead = new ListNode(-1); ListNode pre = dummyHead; int t = 0; while (l1 != null || l2 != null || t != 0) { if (l1 != null) { t += l1.val; l1 = l1.next; } if (l2 != null) { t += l2.val; l2 = l2.next; } pre.next = new ListNode(t % 10); pre = pre.next; t /= 10; } return dummyHead.next; } /// &lt;summary&gt; /// LeetCode回文数 /// &lt;/summary&gt; /// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsPalindrome(int x) { if (x &lt; 0) { return false; } string num = x.ToString(); List&lt;string&gt; list = new List&lt;string&gt;(); for (int i = 0; i &lt; num.Length; i++) { list.Add(num[i].ToString()); } var arr = list.ToArray(); Array.Reverse(arr); string num2 = string.Empty; for (int i = 0; i &lt; arr.Length; i++) { num2 += arr[i].ToString(); } return x == Convert.ToInt32(num2); //别人的方法 //if (x &lt; 0) // return false; //int rem = 0, y = 0; //int quo = x; //while (quo != 0) //{ // rem = quo % 10; // y = y * 10 + rem; // quo = quo / 10; //} //return y == x; } /// &lt;summary&gt; /// LeetCode有效的括号 /// &lt;/summary&gt; /// &lt;param name=&quot;s&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsValid(string s) { while (s.Contains(&quot;()&quot;) || s.Contains(&quot;{}&quot;) || s.Contains(&quot;[]&quot;)) { s = s.Replace(&quot;()&quot;, &quot;&quot;).Replace(&quot;{}&quot;, &quot;&quot;).Replace(&quot;[]&quot;, &quot;&quot;); } return s.Length == 0; } /// &lt;summary&gt; /// LeetCode各位相加 /// &lt;/summary&gt; /// &lt;param name=&quot;num&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int AddDigits(int num) { //string number = num.ToString(); //int x = 0; //while (Convert.ToInt32(number) &gt;= 10) //{ // for (int i = 0; i &lt; number.Length; i++) // { // x += Convert.ToInt32(number[i].ToString()); // } // if (x &gt;= 10) // { // number = x.ToString(); // x = 0; // continue; // } // return x; //} //return num; //别人的方法 return (num - 1) % 9 + 1; } /// &lt;summary&gt; /// LeetCode寻找两个正序数组的中位数 /// &lt;/summary&gt; /// &lt;param name=&quot;nums1&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;nums2&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static double FindMedianSortedArrays(int[] nums1, int[] nums2) { List&lt;int&gt; list = new List&lt;int&gt;(); list.AddRange(nums1); list.AddRange(nums2); list.Sort(); int count = 0; if (list.Count % 2 == 0) { count = list.Count / 2; double num = list[count - 1] + list[count]; return Convert.ToDouble(num / 2); } list.Add(list[list.Count - 1]); list.Sort(); count = list.Count / 2; return list[count - 1]; } /// &lt;summary&gt; /// LeetCode快乐数 /// &lt;/summary&gt; /// &lt;param name=&quot;n&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsHappy(int n) { if (n == 1) { return true; } List&lt;int&gt; list = new List&lt;int&gt;();//存一个数 while (n &gt; 1) { int num2 = 0; string num = n.ToString(); for (int i = 0; i &lt; num.Length; i++) { num2 += Convert.ToInt32(num[i].ToString()) * Convert.ToInt32(num[i].ToString()); } list.Add(num2); if (list.Where(s =&gt; s.Equals(num2)).ToList().Count &gt; 1) { //如果多次循环则返回false GC.Collect(); return false; } if (num2 == 1) { return true; } n = num2; } return false; } /// &lt;summary&gt; /// LeetCode加一 /// &lt;/summary&gt; /// &lt;param name=&quot;digits&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int[] PlusOne(int[] digits) { List&lt;int&gt; list = new List&lt;int&gt;(); list.AddRange(digits); for (int i = digits.Length - 1; i &gt;= 0; i--) { if (digits[i] != 9) { //第一次循环最后一位数不为9直接+1返回结果 digits[i]++; return digits; } //否则当前下标数进位满10为0 digits[i] = 0; } //循环走完说明全是9，长度+1 int[] arr = new int[digits.Length + 1]; arr[0] = 1; GC.Collect(); return arr; } /// &lt;summary&gt; /// LeetCode移动零 /// &lt;/summary&gt; /// &lt;param name=&quot;nums&quot;&gt;&lt;/param&gt; public static void MoveZeroes(int[] nums) { int length = nums.Length; int i, j = 0; for (i = 0; i &lt; length; i++) { if (nums[i] != 0) { nums[j] = nums[i]; j++; } } while (j &lt; length) { nums[j++] = 0; } GC.Collect(); } /// &lt;summary&gt; /// LeetCode将找到的值乘以2 /// &lt;/summary&gt; /// &lt;param name=&quot;nums&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;original&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int FindFinalValue(int[] nums, int original) { for (int i = 0; i &lt; nums.Length; i++) { if (nums[i] == original) { GC.Collect(); return FindFinalValue(nums, original *= 2); } } GC.Collect(); return original; } /// &lt;summary&gt; /// LeetCode排列硬币 /// &lt;/summary&gt; /// &lt;param name=&quot;n&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int ArrangeCoins(int n) { if (n == 1) { return 1; } int count = 0; int m = n; for (int i = 1; i &lt; m; i++) { if (n - i &gt;= 0) { n -= i; count++; continue; } return count; } GC.Collect(); return count; } /// &lt;summary&gt; /// LeetCode两整数相加 /// &lt;/summary&gt; /// &lt;param name=&quot;num1&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;num2&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int Sum(int num1, int num2) { return num1 + num2; } /// &lt;summary&gt; /// LeetCode只出现一次的数字（抄来的未提交） /// &lt;/summary&gt; /// &lt;param name=&quot;nums&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int SingleNumber(int[] nums) { return nums.Aggregate((a, b) =&gt; a ^ b); } /// &lt;summary&gt; /// LeetCode只出现一次的数字 /// &lt;/summary&gt; /// &lt;param name=&quot;nums&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int SingleNumber(int[] nums) { List&lt;int&gt; list = new List&lt;int&gt;(); list.AddRange(nums); for (int i = 0; i &lt; list.Count; i++) { if (list.Where(s =&gt; s == list[i]).ToList().Count == 1) { return list[i]; } } return 0; } /// &lt;summary&gt; /// LeetCode 2的幂 /// &lt;/summary&gt; /// &lt;param name=&quot;n&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsPowerOfTwo(int n) { if (n == 1) { return true; } if (n % 2 != 0 || n &lt;= 0) { return false; } return IsPowerOfTwo(n / 2); } /// &lt;summary&gt; /// LeetCode 3的幂 /// &lt;/summary&gt; /// &lt;param name=&quot;n&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsPowerOfThree(int n) { if (n == 1) { return true; } if (n % 3 != 0 || n &lt;= 0) { return false; } return IsPowerOfThree(n / 3); } /// &lt;summary&gt; /// LeetCode 4的幂 /// &lt;/summary&gt; /// &lt;param name=&quot;n&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsPowerOfFour(int n) { if (n == 1) { return true; } if (n % 4 != 0 || n &lt; 0) { return false; } return IsPowerOfFour(n / 4); } /// &lt;summary&gt; /// LeetCode第三大的数 /// &lt;/summary&gt; /// &lt;param name=&quot;n&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int ThirdMax(int[] nums) { Array.Sort(nums); Array.Reverse(nums); nums = nums.Distinct().ToArray(); if (nums.Length &gt;= 3) { return nums[2]; } return nums[0]; } /// &lt;summary&gt; /// LeetCode斐波那契数 /// &lt;/summary&gt; /// &lt;param name=&quot;n&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int Fib(int n) { if(n == 0) { return 0; } if (n == 1) { return 1; } return Fib(n - 1) + Fib(n - 2); } /// &lt;summary&gt; /// LeetCode三个数的最大乘积 /// &lt;/summary&gt; /// &lt;param name=&quot;nums&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int MaximumProduct(int[] nums) { Array.Sort(nums); return nums[0] * nums[1] * nums[nums.Length - 1] &gt; nums[nums.Length - 1] * nums[nums.Length - 2] * nums[nums.Length - 3] ? nums[0] * nums[1] * nums[nums.Length - 1] : nums[nums.Length - 1] * nums[nums.Length - 2] * nums[nums.Length - 3]; } /// &lt;summary&gt; /// LeetCode X的平方根 /// &lt;/summary&gt; /// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int MySqrt(int x) { return (int)Math.Sqrt(x); } /// &lt;summary&gt; /// LeetCode二分查找 /// &lt;/summary&gt; /// &lt;param name=&quot;nums&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;target&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int Search(int[] nums, int target) { //Array.Sort(nums); //for (int i = 0; i &lt; nums.Length; i++) //{ // if (nums[i] == target) // { // return i; // } //} //return -1; //二分查找 Array.Sort(nums); int start = 0; int end = nums.Length - 1; while (start &lt; end) { int mid = (start + end) / 2; if (nums[mid] == target) { return mid; } if (nums[mid] &gt; target) { end = mid - 1; } if (nums[mid] &lt; target) { start = mid + 1; } } return -1; } /// &lt;summary&gt; /// LeetCode整数反转（不符合要求） /// &lt;/summary&gt; /// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static int Reverse(int x) { string num = string.Empty; if (x &lt; 0) { num = (x * -1).ToString();//变正数 } else { num = (x * -1).ToString(); } string nums = string.Empty; for (int i = num.Length-1; i &gt;= 0; i--) { //最后一位是0的话就跳出 if (num[num.Length - 1] == 0) { continue; } nums += num[i].ToString(); } if (x &lt; 0) { return Convert.ToInt32(nums) * -1;//还原符号 } return Convert.ToInt32(nums); }","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"Office365 E5账号遇到的问题","slug":"Office365","date":"2022-05-18T13:00:00.000Z","updated":"2022-06-07T02:06:18.511Z","comments":true,"path":"Other/Office365/","link":"","permalink":"/Other/Office365/","excerpt":"","text":"这两天为了使用Office365注册了一个E5开发人员账号但最近微软强制使用手机令牌Authenticator登陆的时候进行了绑定每一次登录都得拿出手机确认登录，就很麻烦所以我在Azure Active Directory设置里面关掉了安全默认值，打开网址Azure Active Directory具体操作如下 并且在 Office设置页面 的安全信息页面把Microsoft Authenticator和电子邮件登陆方法都删除了 这两步做完就导致E5账号无法登录了，手机令牌没了但还是提示需要手机令牌确认才可以登录借用社区的相同问题作为参考Microsoft 365 开发人员订阅唯一管理员账户丢失 Authenticator 验证码和无法批准Authenticator管理员账户登陆请求解决办法只能求助官方了，具体操作步骤如下进入联系中国支持人员网址，拨打电话800 988 0365向客服提交相应的问题，问题描述可以参考上方的社区问题，客服会把问题转成工单，然后会有技术支持人员联系，需要电脑远程重现问题所在，当然这一步如果遇到的是与我相同的问题那么是不可能解决的，技术支持会提交到数据安全部门，最后数据安全部门会清除你账号的所有验证方式，再次登录进行绑定就可以开始你的表演了","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"SqlSugar的使用日常","slug":"SqlSugar","date":"2022-02-22T22:22:22.000Z","updated":"2022-06-07T02:06:18.542Z","comments":true,"path":"DotNET/SqlSugar/","link":"","permalink":"/DotNET/SqlSugar/","excerpt":"这两天从FreeSql转SqlSugar，记录一些日常","text":"这两天从FreeSql转SqlSugar，记录一些日常 首先本地装了一个8.0.28最新版本的MySQL然后项目中集成MySQL和SqlSugar 项目分层我是在放实体的DataModel层添加引用&lt;PackageReference Include=&quot;MySql.Data&quot; Version=&quot;8.0.28&quot; /&gt; &lt;PackageReference Include=&quot;SqlSugarCore&quot; Version=&quot;5.0.5.4&quot; /&gt; 然后处理代码逻辑是在DataService层，也就是接口实现，所以在这层写上下文类using SqlSugar; namespace DataService { /// &lt;summary&gt; /// 数据库上下文类 /// &lt;/summary&gt; public class DbContext { public static string ConnectionString { get; set; } public static SqlSugarClient GetInstance() { var db = new SqlSugarClient(new ConnectionConfig { ConnectionString = ConnectionString, DbType = DbType.MySql, IsAutoCloseConnection = true,//自动释放数据务，如果存在事务，在事务结束后释放 InitKeyType = InitKeyType.Attribute//从实体特性中读取主键自增列信息 }); return db; } } } 在Startup中ConfigureServices里注入//连接MySQL数据库，添加数据库上下文 DataService.DbContext.ConnectionString = Configuration.GetConnectionString(&quot;MySQLConnection&quot;); appsettings.json添加本地数据库连接字符串&quot;ConnectionStrings&quot;: { &quot;MySQLConnection&quot;: &quot;server=127.0.0.1;uid=root;pwd=123456;port=3306;database=world;SslMode=None&quot; } 今天本打算写一个树形结构的菜单层级处理，看到SqlSugar官方文档有自带的方法ToTree简单使用一下，以下是数据库结构 实体类数据代码using System.Collections.Generic; using SqlSugar; namespace DataModel.Table { /// &lt;summary&gt; /// 菜单表 /// &lt;/summary&gt; [SugarTable(&quot;menuinfo&quot;)] public partial class MenuInfo { /// &lt;summary&gt; /// 主键 /// &lt;/summary&gt; [SugarColumn(IsPrimaryKey = true, IsIdentity = true)] public int Id { get; set; } /// &lt;summary&gt; /// 菜单名称 /// &lt;/summary&gt; public string MenuName { get; set; } /// &lt;summary&gt; /// 父级Id /// &lt;/summary&gt; public int? ParentId { get; set; } /// &lt;summary&gt; /// 不验证数据库，做树形结构使用 /// &lt;/summary&gt; [SqlSugar.SugarColumn(IsIgnore = true)] public List&lt;MenuInfo&gt; Child { get; set; } } } 示例代码using (var db = DbContext.GetInstance()) { //首次连接数据库获取数据不计算在耗时之内 db.Queryable&lt;MenuInfo&gt;().ToJson(); //SqlSugar自带树形结构 Stopwatch sw = new Stopwatch(); sw.Start(); var tree = db.Queryable&lt;MenuInfo&gt;().ToTree(s =&gt; s.Child, s =&gt; s.ParentId, 0); string json = JsonConvert.SerializeObject(tree); sw.Stop(); //Linq自带Foreach实现递归遍历树形结构 Stopwatch sw2 = new Stopwatch(); sw2.Start(); var list = db.Queryable&lt;MenuInfo&gt;().ToList(); list.ForEach(s =&gt; s.Child = list.Where(x =&gt; x.ParentId == s.Id).ToList()); var tree2 = list.Count &gt; 0 ? list.Where(s =&gt; s.ParentId == list.OrderBy(s =&gt; s.ParentId).ToList().FirstOrDefault().ParentId).ToList() : null; string json2 = JsonConvert.SerializeObject(tree2); sw2.Stop(); _logger.LogInformation(&quot;SqlSugar耗时：{0}ms，数据：{1}&quot;, sw.ElapsedTicks / (decimal)Stopwatch.Frequency * 1000, json);//SqlSugar _logger.LogInformation(&quot;Linq Foreach耗时：{0}ms，数据：{1}&quot;, sw2.ElapsedTicks / (decimal)Stopwatch.Frequency * 1000, json2);//Linq Foreach //SqlSugar的性能没有Linq Foreach高 } 运行五次并打印日志SqlSugar耗时：14.0168000ms Linq Foreach耗时：7.8033000ms SqlSugar耗时：1.6285000ms Linq Foreach耗时：1.0115000ms SqlSugar耗时：0.8813000ms Linq Foreach耗时：0.7391000ms SqlSugar耗时：4.4206000ms Linq Foreach耗时：4.1635000ms SqlSugar耗时：1.015000ms Linq Foreach耗时：0.8329000ms 结论：SqlSugar这个ToTree方法处理树形结构很方便，但是实际性能Foreach要好一丢丢","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":".NET Core集成Log4net","slug":"DotNETCore_WebAPI_Log4net","date":"2022-02-19T15:00:00.000Z","updated":"2022-06-07T02:06:18.386Z","comments":true,"path":"DotNET/DotNETCore_WebAPI_Log4net/","link":"","permalink":"/DotNET/DotNETCore_WebAPI_Log4net/","excerpt":"项目中常用的日志组件为Log4net，今天记录一下最简单集成Log4net的方法","text":"项目中常用的日志组件为Log4net，今天记录一下最简单集成Log4net的方法 准备工作： 创建WebAPI项目，这边使用的.NET Core 3.1 安装Nuget包：Microsoft.Extensions.Logging.Log4Net.AspNetCore 添加Log4net.Config配置文件 &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;log4net&gt; &lt;appender name=&quot;RollingAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt; &lt;!--指定日志文件保存的目录--&gt; &lt;file value=&quot;log\\&quot;/&gt; &lt;!--追加日志内容--&gt; &lt;appendToFile value=&quot;true&quot;/&gt; &lt;!--可以为：Once|Size|Date|Composite--&gt; &lt;!--Compoosite为Size和Date的组合--&gt; &lt;rollingStyle value=&quot;Composite&quot;/&gt; &lt;!--设置为true，当前最新日志文件名永远为file字节中的名字--&gt; &lt;staticLogFileName value=&quot;false&quot;/&gt; &lt;!--当备份文件时，备份文件的名称及后缀名--&gt; &lt;datePattern value=&quot;yyyyMMdd&#39;.log&#39;&quot;/&gt; &lt;!--日志最大个数--&gt; &lt;!--rollingStyle节点为Size时，只能有value个日志--&gt; &lt;!--rollingStyle节点为Composie时，每天有value个日志--&gt; &lt;maxSizeRollBackups value=&quot;20&quot;/&gt; &lt;!--可用的单位：KB|MB|GB--&gt; &lt;maximumFileSize value=&quot;5MB&quot;/&gt; &lt;filter type=&quot;log4net.Filter.LevelRangeFilter&quot;&gt; &lt;param name=&quot;LevelMin&quot; value=&quot;ALL&quot;/&gt; &lt;param name=&quot;LevelMax&quot; value=&quot;FATAL&quot;/&gt; &lt;/filter&gt; &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt; &lt;conversionPattern value=&quot;%date [%thread] %-5level %logger [%property{NDC}] - %message%newline&quot;/&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;root&gt; &lt;priority value=&quot;ALL&quot;/&gt; &lt;level value=&quot;ALL&quot;/&gt; &lt;appender-ref ref=&quot;RollingAppender&quot;/&gt; &lt;/root&gt; &lt;/log4net&gt; 在Program.cs中CreateHostBuilder代码块添加代码public static IHostBuilder CreateHostBuilder( string[] args) =&gt; Host.CreateDefaultBuilder(args) //添加日志组件 .ConfigureLogging((hostContext, logger) =&gt; { //logger.ClearProviders();//清除系统默认日志 //logger.AddFilter(&quot;System&quot;, LogLevel.Warning); //logger.AddFilter(&quot;Microsoft&quot;, LogLevel.Warning); logger.AddLog4Net(&quot;Log4net.Config&quot;); }) .ConfigureWebHostDefaults(webBuilder =&gt; { webBuilder.UseStartup&lt;Startup&gt;(); }); 接下来就可以在控制器或者接口实现去使用构造函数注入了//控制器内使用 private ILogger&lt;FileController&gt; _logger; public FileController(ILogger&lt;FileController&gt; logger) { _logger = logger; _logger.LogError(&quot;This is FileController Log&quot;); } 运行即可看到项目生成目录多了一个log文件夹以及日志文件","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":".NET Core导出PDF和Excel","slug":"PDF_Excel","date":"2021-12-30T14:00:00.000Z","updated":"2022-06-07T02:06:18.527Z","comments":true,"path":"DotNET/PDF_Excel/","link":"","permalink":"/DotNET/PDF_Excel/","excerpt":"关于生成PDF和Excel文件的最简单方法","text":"关于生成PDF和Excel文件的最简单方法 导出Excel需要导入EPPlus包导入命名空间using OfficeOpenXml; 示例代码如下/// &lt;summary&gt; /// 请求接口直接下载Excel /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; [HttpGet] public async Task&lt;IActionResult&gt; GetExcel() { string fileName = $&quot;{Guid.NewGuid()}.xlsx&quot;; var stream = new MemoryStream(); ExcelPackage.LicenseContext = LicenseContext.NonCommercial; using (ExcelPackage package = new ExcelPackage(stream)) { // 添加worksheet ExcelWorksheet worksheet = package.Workbook.Worksheets.Add(&quot;DeliveryReceiptSignLog&quot;); //添加头 //worksheet.Cells.Style.ShrinkToFit = true;//单元格自动适应大小 worksheet.Cells[1, 1].Value = &quot;跟踪码&quot;; worksheet.Cells[1, 2].Value = &quot;收款金额&quot;; worksheet.Cells[1, 3].Value = &quot;收款方式&quot;; worksheet.Cells[1, 4].Value = &quot;POS流水号&quot;; worksheet.Cells[1, 5].Value = &quot;终端号&quot;; worksheet.Column(1).Width = 25; worksheet.Column(2).Width = 25; worksheet.Column(3).Width = 25; worksheet.Column(4).Width = 25; worksheet.Column(5).Width = 25; worksheet.Column(2).Style.Numberformat.Format = &quot;￥#,##0.00&quot;;//金额格式 //从第二行第三列到第一万行第三列，三列被设置为下拉框 var unitmeasure = worksheet.DataValidations.AddListValidation(worksheet.Cells[2, 3, 10000, 3].Address); unitmeasure.Formula.Values.Add(&quot;现金&quot;); unitmeasure.Formula.Values.Add(&quot;刷卡&quot;); int rowCount = 1;//行 int cellCount = 0;//列 //添加数据（循环可改为数据集） for (int i = 1; i &lt;= 20; i++) { rowCount++; worksheet.Cells[rowCount, ++cellCount].Value = i; worksheet.Cells[rowCount, ++cellCount].Value = i; worksheet.Cells[rowCount, ++cellCount].Value = unitmeasure.Formula.Values[1]; worksheet.Cells[rowCount, ++cellCount].Value = i; worksheet.Cells[rowCount, ++cellCount].Value = i; cellCount = 0;//重置 } worksheet.Protection.IsProtected = true;//设置是否进行锁定 worksheet.Protection.SetPassword(&quot;123456&quot;);//设置密码 worksheet.Protection.AllowAutoFilter = false;//下面是一些锁定时权限的设置 worksheet.Protection.AllowDeleteColumns = false; worksheet.Protection.AllowDeleteRows = false; worksheet.Protection.AllowEditScenarios = false; worksheet.Protection.AllowEditObject = false; worksheet.Protection.AllowFormatCells = false; worksheet.Protection.AllowFormatColumns = false; worksheet.Protection.AllowFormatRows = false; worksheet.Protection.AllowInsertColumns = false; worksheet.Protection.AllowInsertHyperlinks = false; worksheet.Protection.AllowInsertRows = false; worksheet.Protection.AllowPivotTables = false; worksheet.Protection.AllowSelectLockedCells = false; worksheet.Protection.AllowSelectUnlockedCells = false; worksheet.Protection.AllowSort = false; package.Save(); } stream.Position = 0; return await Task.FromResult(File(stream, &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;, fileName)); } .NET Core导出PDF需要导入iTextSharp.LGPLv2.Core导入命名空间using iTextSharp.text; using iTextSharp.text.pdf; Controller代码如下/// &lt;summary&gt; /// 直接获取文件（PDF） /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; [HttpGet] public async Task&lt;IActionResult&gt; GetPDF() { string fileName = $&quot;{Guid.NewGuid()}.pdf&quot;; DataEntity data = new DataEntity(); data.TaskName = &quot;SHXH0514huangjinjin05142020/09/14-3&quot;; data.SiteName = &quot;浦东配送站&quot;; var users = new List&lt;User&gt;() { new User { Id=1, OrderNo=&quot;200911SHDF01634290&quot;, Route=&quot;SHXH10b&quot;, FromToTime=&quot;2020-09-13 13:33:00 14:33:00&quot;, Address=&quot;上海 上海市 黄浦区南京东路街道9999999999999&quot;, Remark=&quot;（生日快乐）&quot;, Count=1, Amount=0.01M }, new User { Id=2, OrderNo=&quot;210831SHKF01938125&quot;, Route=&quot;SHCN#2a&quot;, FromToTime=&quot;2021-09-03 10:00:00 10:30:00&quot;, Address=&quot;上海 上海市 徐汇区田林路140号&quot;, Remark=&quot;&quot;, Count=1, Amount=0.00M+6 } }; data.users = users; if (PDFHelper.GetPDF(data).Length&gt;0) { var stream = new MemoryStream(PDFHelper.GetPDF(data)); return await Task.FromResult(File(stream, &quot;application/pdf&quot;, fileName)); } return null; } PDFHelper.GetPDF代码全篇需导入命名空间using iTextSharp.text; using iTextSharp.text.pdf; public static class PDFHelper { /// &lt;summary&gt; /// 返回字节 /// &lt;/summary&gt; /// &lt;param name=&quot;data&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static byte[] GetPDF(DataEntity data) { //生成pdf Document document = new Document(); //var fileStream = new MemoryStream(); string fileName = &quot;测试.pdf&quot;; var fileStream = File.Create(fileName);//C:\\\\Users\\\\Tianci\\\\Desktop\\\\PDF\\\\ PdfWriter pw = PdfWriter.GetInstance(document, fileStream); document.Open(); //指定字体文件，IDENTITY_H：支持中文 string fontpath = @&quot;C:\\Windows\\Fonts\\SIMHEI.TTF&quot;; BaseFont customfont = BaseFont.CreateFont(fontpath, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); //设置字体颜色样式 var baseFont = new Font(customfont) { //System.Drawing.Color.Black Color = new BaseColor(0,0,0), //设置字体颜色 Size = 8 //字体大小 }; #region 头部 //定义table行列数据 //PdfPTable tableRow_1 = new PdfPTable(1); //生成只有一列的行数据 //tableRow_1.DefaultCell.Border = Rectangle.NO_BORDER; //无边框 //tableRow_1.WidthPercentage = 100; //tableRow_1.DefaultCell.MinimumHeight = 80f; //高度 //float[] headWidths_1 = new float[] { 3000f }; //宽度 //tableRow_1.SetWidths(headWidths_1); //定义字体样式 var headerStyle = new Font(customfont) { Color = new BaseColor(0,0,0),//System.Drawing.Color.Black Size = 18, }; //var Row_1_Cell_1 = new PdfPCell(new Paragraph(&quot;配送任务单&quot;, headerStyle)); //Row_1_Cell_1.HorizontalAlignment = Element.ALIGN_CENTER;//居中 //tableRow_1.AddCell(Row_1_Cell_1); var head = new Paragraph(&quot;配送任务单&quot;, headerStyle); head.IndentationLeft = 200f; var headerStyle2 = new Font(customfont) { Color = new BaseColor(0,0,0),//System.Drawing.Color.Black Size = 10, }; var para = new Paragraph(string.Format(&quot;任务名称：{0} 站点：{1}&quot;, data.TaskName, data.SiteName), headerStyle2); para.IndentationLeft = -30f; var placeholder = new Paragraph(&quot; &quot;, headerStyle2);//上方文字与表格相隔间距 PdfPTable tableRow_2 = new PdfPTable(8); tableRow_2.TotalWidth = 580f; tableRow_2.LockedWidth = true; tableRow_2.DefaultCell.Border = Rectangle.NO_BORDER; tableRow_2.WidthPercentage = 100; tableRow_2.DefaultCell.MinimumHeight = 80f; //float[] headWidths_2 = new float[] { 100f, 300f, 120f, 300f, 540f, 300f, 100f, 200f }; float[] headWidths_2 = new float[] { 50f, 120f, 60f, 150f, 220f, 140f, 50f, 70f };//搭配TotalWidth和LockedWidth使用 tableRow_2.SetWidths(headWidths_2); var Row_2_Cell_1 = new PdfPCell(new Paragraph(&quot;序号&quot;, baseFont)); Row_2_Cell_1.HorizontalAlignment = Element.ALIGN_CENTER;//文字居中 Row_2_Cell_1.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_1); var Row_2_Cell_2 = new PdfPCell(new Paragraph(&quot;跟踪代码&quot;, baseFont)); Row_2_Cell_2.HorizontalAlignment = Element.ALIGN_CENTER; Row_2_Cell_2.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_2); var Row_2_Cell_3 = new PdfPCell(new Paragraph(&quot;线路&quot;, baseFont)); Row_2_Cell_3.HorizontalAlignment = Element.ALIGN_CENTER; Row_2_Cell_3.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_3); var Row_2_Cell_4 = new PdfPCell(new Paragraph(&quot;配送时间&quot;, baseFont)); Row_2_Cell_4.HorizontalAlignment = Element.ALIGN_CENTER; Row_2_Cell_4.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_4); var Row_2_Cell_5 = new PdfPCell(new Paragraph(&quot;地址&quot;, baseFont)); Row_2_Cell_5.HorizontalAlignment = Element.ALIGN_CENTER; Row_2_Cell_5.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_5); var Row_2_Cell_6 = new PdfPCell(new Paragraph(&quot;备注&quot;, baseFont)); Row_2_Cell_6.HorizontalAlignment = Element.ALIGN_CENTER; Row_2_Cell_6.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_6); var Row_2_Cell_7 = new PdfPCell(new Paragraph(&quot;商品数&quot;, baseFont)); Row_2_Cell_7.HorizontalAlignment = Element.ALIGN_CENTER; Row_2_Cell_7.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_7); var Row_2_Cell_8 = new PdfPCell(new Paragraph(&quot;应收金额&quot;, baseFont)); Row_2_Cell_8.HorizontalAlignment = Element.ALIGN_CENTER; Row_2_Cell_8.BackgroundColor = BaseColor.LightGray; tableRow_2.AddCell(Row_2_Cell_8); document.Add(head); document.Add(placeholder); document.Add(para); document.Add(placeholder); //document.Add(tableRow_1); document.Add(tableRow_2); #endregion #region 填充List数据 Type t = new User().GetType();//获得该类的Type for (int i = 0; i &lt; data.users.Count; i++) { PdfPTable tableRow_3 = new PdfPTable(8); tableRow_3.TotalWidth = 580f; tableRow_3.LockedWidth = true; tableRow_3.DefaultCell.Border = Rectangle.NO_BORDER; tableRow_3.WidthPercentage = 100; tableRow_3.DefaultCell.MinimumHeight = 80f; //float[] headWidths_3 = new float[] { 100f, 300f, 120f, 300f, 540f, 300f, 100f, 200f }; float[] headWidths_3 = new float[] { 50f, 120f, 60f, 150f, 220f, 140f, 50f, 70f }; tableRow_3.SetWidths(headWidths_3); foreach (PropertyInfo pi in t.GetProperties())//遍历属性值 { var value = pi.GetValue(data.users[i]).ToString(); var txt = new Paragraph(value, baseFont); var cell = new PdfPCell(txt); tableRow_3.AddCell(cell); } document.Add(tableRow_3); } #endregion //页脚 PDFFooter footer = new PDFFooter(); footer.OnEndPage(pw, document); document.Close(); fileStream.Close(); fileStream.Dispose(); return GetFileStream(fileName); } /// &lt;summary&gt; /// 文件转成字节 /// 并删除文件 /// 返回字节 /// &lt;/summary&gt; /// &lt;param name=&quot;filePath&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static byte[] GetFileStream(string filePath) { var byteBuffer = File.ReadAllBytes(filePath); if (byteBuffer.Length &gt; 0) { if (File.Exists(filePath)) { File.Delete(filePath); } return byteBuffer; } return null; } public class PDFFooter : PdfPageEventHelper { // write on top of document public override void OnOpenDocument(PdfWriter writer, Document document) { base.OnOpenDocument(writer, document); PdfPTable tabFot = new PdfPTable(new float[] { 1F }); tabFot.SpacingAfter = 10F; PdfPCell cell; //tabFot.TotalWidth = 300F; cell = new PdfPCell(new Phrase(&quot;Header&quot;)); tabFot.AddCell(cell); tabFot.WriteSelectedRows(0, -1, 150, document.Top, writer.DirectContent); } // write on start of each page public override void OnStartPage(PdfWriter writer, Document document) { base.OnStartPage(writer, document); } // write on end of each page public override void OnEndPage(PdfWriter writer, Document document) { base.OnEndPage(writer, document); var footFont = FontFactory.GetFont(&quot;Lato&quot;, 12 * 0.667f, new BaseColor(60, 60, 60));//* } //write on close of document public override void OnCloseDocument(PdfWriter writer, Document document) { base.OnCloseDocument(writer, document); } } } public class User { public int Id { get; set; } public string OrderNo { get; set; } public string Route { get; set; } public string FromToTime { get; set; } public string Address { get; set; } public string Remark { get; set; } public int Count { get; set; } public decimal Amount { get; set; } } public class DataEntity { public string TaskName { get; set; } public string SiteName { get; set; } public List&lt;User&gt; users = new List&lt;User&gt;(); } 散会!!!","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"ForEver","slug":"ForEver","date":"2021-11-02T18:00:00.000Z","updated":"2022-06-07T02:06:18.386Z","comments":false,"path":"Other/ForEver/","link":"","permalink":"/Other/ForEver/","excerpt":"再见","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById(\"enc_error\").innerHTML = \"password error!\" }; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"/tags/娱乐/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"Layui小知识","slug":"Layui_First","date":"2021-08-19T15:00:00.000Z","updated":"2022-06-07T02:06:18.402Z","comments":true,"path":"Other/Layui_First/","link":"","permalink":"/Other/Layui_First/","excerpt":"遇到的一些问题及解决方法","text":"遇到的一些问题及解决方法 首先定义Layui需要的组件var $ = layui.$; var admin = layui.admin; var table = layui.table; var layer = layui.layer; var form = layui.form; 下拉框从接口获取数据并赋值&lt;div class=&quot;layui-input-inline&quot; style=&quot;width:100px;&quot;&gt; &lt;select asp-for=&quot;绑定字段&quot; name=&quot;绑定字段&quot; class=&quot;绑定字段Mode&quot; autocomplete=&quot;off&quot; lay-search&gt; &lt;/select&gt; &lt;/div&gt; $(function () { $.ajax({ url: &#39;@Url.Action(&quot;Create&quot;, &quot;User&quot;)&#39;,//请求地址（MVC写法，方法，控制器名） type: &#39;POST&#39;, dataType: &#39;json&#39;, contentType: &quot;application/json; charset=utf-8&quot;, success: function (result) { if (result.code == 200) { for (var k in result.data) { $(&quot;.绑定字段Mode&quot;).append(&quot;&lt;option value=&#39;&quot; + result.data[k].KeyName + &quot;&#39;&gt;&quot; + result.data[k].Value + &quot;&lt;/option&gt;&quot;);//通过class添加选项 } layui.use(&#39;form&#39;, function () { var form = layui.form; form.render(); }); } else { layer.msg(result.msg, { icon: 2, offset: &#39;200px&#39;, time: 3000 }) } } }); }); 获取当前页面表单里面的数据var data = form.val(&#39;formId&#39;);//通过表单Id取全部字段数据 获取子页面表单数据逻辑：打开添加表单（新页面Create）点提交调用POST方法传值（dataValue）layer.open({ type: 2, title: &#39;添加用户&#39;, id: &#39;CreateUser&#39;, content: &#39;@Url.Action(&quot;Create&quot;, &quot;User&quot;)&#39;,//打开页面（MVC写法，对应页面及GET方法，控制器名） area: [&#39;528px&#39;, &#39;468px&#39;], maxmin: true, btn: [&#39;提交&#39;, &#39;关闭&#39;], yes: function (index, layero) { var iframeWindow = layero.find(&#39;iframe&#39;)[0].contentWindow; var dataValue = iframeWindow.layui.form.val(&quot;子页面form表单Id&quot;);//表单数据 $.ajax({ url: &#39;@Url.Action(&quot;Create&quot;, &quot;User&quot;)&#39;,//请求POST地址（MVC写法，POST方法，控制器名） type: &#39;POST&#39;, dataType: &#39;json&#39;, data: JSON.stringify(dataValue), contentType: &quot;application/json; charset=utf-8&quot;, success: function (result) { if (result.responseCode == 200) { layer.msg(result.Message, { offset: &#39;200px&#39;, time: 3000 }) layer.close(index); } else { layer.msg(result.Message, { icon: 2, offset: &#39;200px&#39;, time: 3000 }) } } }); }, cancel: function () { return true; }, end: function () { table.reload(&#39;当前页面列表TableId&#39;, { page: { curr: 1 } }); } }); 给新页面表单赋默认值，点击修改的场景在控制器内Edit对应的GET方法返回值就可以了，Edit页面form表单绑定","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"初识ML.NET","slug":"ML.NET","date":"2021-08-11T15:00:00.000Z","updated":"2022-06-07T02:06:18.402Z","comments":true,"path":"Other/ML.NET/","link":"","permalink":"/Other/ML.NET/","excerpt":"什么是ML.NET，官方文档给出解释如下","text":"什么是ML.NET，官方文档给出解释如下 ML.NET 使你能够在联机或脱机场景中将机器学习添加到 .NET 应用程序中。 借助此功能，可以使用应用程序的可用数据进行自动预测。 机器学习应用程序利用数据中的模式来进行预测，而不需要进行显式编程。 ML.NET 的核心是机器学习模型 。 该模型指定将输入数据转换为预测所需的步骤。 借助 ML.NET，可以通过指定算法来训练自定义模型，也可以导入预训练的 TensorFlow 和 ONNX 模型。 拥有模型后，可以将其添加到应用程序中进行预测。 意思就是可以脱机训练模型，让程序拥有自主判断意识第一步创建一个机器学习模型，在一个新项目中右击添加机器学习 选择一个方案，这边选择图像分类 选择环境，因为没有Azure上的数据所以选择本地文件夹 这边选择的图片有点多，分为四个类型 点击训练，如果图片太多训练时间也会变长，这边已经训练好了 训练完成可以选择一张本地图片来进行分析 最后可以将代码添加到本地，查看运行逻辑以及生成的文件 打开ConsoleApp.Program.cs文件修改ModelInput sampleData = new ModelInput() { ImageSource = &quot;可填本地任意图片路径&quot; }; 我这边下载了很多图片进行循环分析 最后一共五十张图片，误判11张，想要识别更加精确就得添加更多图片识别更多细节进行分析","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"Appveyor持续集成Hexo","slug":"Hexo_Appveyor","date":"2021-08-06T18:00:00.000Z","updated":"2022-06-07T02:06:18.386Z","comments":true,"path":"Other/Hexo_Appveyor/","link":"","permalink":"/Other/Hexo_Appveyor/","excerpt":"半年没写博客，突然接触到一个新词叫做CI（持续集成）和CD（持续交付）学习一下AppVeyor持续集成Hexo并配置GitHub Pages","text":"半年没写博客，突然接触到一个新词叫做CI（持续集成）和CD（持续交付）学习一下AppVeyor持续集成Hexo并配置GitHub Pages 创建项目，在 /projects 页面选择你的博客源码仓库 点击项目中 SETTINGS 选项卡，如果项目分支不是默认的，修改 Default branch再点击 Environment 栏目，设置4个环境变量： name value STATIC_SITE_REPO 静态网址文件存放git地址 TARGET_BRANCH 分支（默认master） GIT_USER_EMAIL git账号 GIT_USER_NAME git名称 GitHub 添加Access Token在https://ci.appveyor.com/tools/encrypt页面加密配置CI，项目根目录添加appveyor.ymlclone_depth: 5 environment: access_token: secure: You Access Token matrix: - nodejs_version: &quot;12&quot; //因为node 14版本生成页面和文件为空，这里改为12版本 install: - ps: Install-Product node $env:nodejs_version - node --version - npm --version - npm install - npm install hexo-cli -g build_script: - hexo generate artifacts: - path: public on_success: - git config --global credential.helper store - ps: Add-Content &quot;$env:USERPROFILE\\.git-credentials&quot; &quot;https://$($env:access_token):x-oauth-basic@github.com`n&quot; - git config --global user.email &quot;%GIT_USER_EMAIL%&quot; - git config --global user.name &quot;%GIT_USER_NAME%&quot; - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\\static-site - cd %TEMP%\\static-site - del * /f /q - for /d %%p IN (*) do rmdir &quot;%%p&quot; /s /q - SETLOCAL EnableDelayedExpansion &amp; robocopy &quot;%APPVEYOR_BUILD_FOLDER%\\public&quot; &quot;%TEMP%\\static-site&quot; /e &amp; IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1)) - git add -A - git commit -m &quot;Update Static Site&quot; - git push origin %TARGET_BRANCH% - appveyor AddMessage &quot;Static Site Updated&quot; 最后代码提交到Git，AppVeyor会自动接收到更新并build提交到指定Git仓库之后更新博客以及代码只需要push即可","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"学习.NET Core Jwt授权与鉴权","slug":"DotNETCore_WebAPI_Jwt","date":"2021-03-03T01:00:00.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/DotNETCore_WebAPI_Jwt/","link":"","permalink":"/DotNET/DotNETCore_WebAPI_Jwt/","excerpt":"大晚上写的博客，内容不是很细致，记录一个简单的过程","text":"大晚上写的博客，内容不是很细致，记录一个简单的过程 首先安装jwt所需的Nuget包Microsoft.AspNetCore.Authentication.JwtBearer System.ldentityModel.Tokens.Jwt 根据账户生成token的方法/// &lt;summary&gt; /// 获取token /// &lt;/summary&gt; /// &lt;param name=&quot;username&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static string GetToken(string username) { if (!string.IsNullOrEmpty(username)) { var claims = new[] { new Claim(JwtRegisteredClaimNames.Sub,username), new Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString()) }; var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&quot;SDMC-CJAS1-SAD-DFSFA-SADHJVF-VF&quot;)); var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256); var token = new JwtSecurityToken ( issuer: &quot;Admin&quot;,//签发人 audience: &quot;Admin&quot;,//受众 claims: claims, expires: DateTime.Now.AddMinutes(3),//过期时间 signingCredentials: creds ); return new JwtSecurityTokenHandler().WriteToken(token); } else { return &quot;账号不存在&quot;; } } ConfigureServices添加JWT验证services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) .AddJwtBearer(options =&gt; { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuer = true,//是否验证Issuer ValidateAudience = true,//是否验证Audience ValidateLifetime = true,//是否验证失效时间 ClockSkew = TimeSpan.FromSeconds(3), ValidateIssuerSigningKey = true,//是否验证SecurityKey ValidAudience = &quot;Admin&quot;,//Audience ValidIssuer = &quot;Admin&quot;,//Issuer，这两项和前面签发jwt的设置一致 IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(&quot;SDMC-CJAS1-SAD-DFSFA-SADHJVF-VF&quot;))//拿到SecurityKey }; options.Events = new JwtBearerEvents { //此处为权限验证失败后触发的事件 OnChallenge = context =&gt; { //此处代码为终止.Net Core默认的返回类型和数据结果，这个很重要哦，必须 context.HandleResponse(); //自定义自己想要返回的数据结果 var payload = JsonConvert.SerializeObject(new { code = 401, res = new { msg = &quot;Token过期，请重新登录!!!&quot; } }); //自定义返回的数据类型 context.Response.ContentType = &quot;application/json&quot;; //自定义返回状态码，默认为401 我这里改成 200 context.Response.StatusCode = StatusCodes.Status401Unauthorized; //输出Json数据结果 context.Response.WriteAsync(payload); return Task.FromResult(0); } }; }); Configure添加jwt鉴权//jwt鉴权 app.UseAuthentication(); //使用跨域 app.UseHttpsRedirection().UseCors(builder =&gt; builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader()); 最后控制器添加[Authorize]用来鉴权如果要使用Swagger进行鉴权，在ConfigureServices里面的services.AddSwaggerGen里面加上下面这段代码即可c.AddSecurityDefinition(&quot;Bearer&quot;, new OpenApiSecurityScheme { In = ParameterLocation.Header, Type = SecuritySchemeType.ApiKey, Description = &quot;直接在下框中输入Bearer {token}（注意两者之间是一个空格）&quot;, Name = &quot;Authorization&quot;, BearerFormat = &quot;JWT&quot;, Scheme = &quot;Bearer&quot; }); c.AddSecurityRequirement(new OpenApiSecurityRequirement { { new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = &quot;Bearer&quot; } }, new string[] {} } });","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"WPF DataTable帮助类","slug":"WPF_Learning_2","date":"2021-01-21T11:30:00.000Z","updated":"2022-06-07T02:06:18.558Z","comments":true,"path":"DotNET/WPF_Learning_2/","link":"","permalink":"/DotNET/WPF_Learning_2/","excerpt":"分享一下WPF DataTable帮助类","text":"分享一下WPF DataTable帮助类 DataTable导出CSV/// &lt;summary&gt; /// DataTable导出CSV /// &lt;/summary&gt; /// &lt;param name=&quot;dt&quot;&gt;&lt;/param&gt; public void SaveCSV(DataTable dt) { SaveFileDialog saveFile = new SaveFileDialog(); saveFile.Title = &quot;保存文件&quot;; saveFile.Filter = &quot;CSV文件(*.csv) |*.csv |所有文件(*.*) |*.*&quot;; saveFile.FilterIndex = 1; if (saveFile.ShowDialog() == System.Windows.Forms.DialogResult.OK) { string fileName = saveFile.FileName; if (File.Exists(fileName)) { File.Delete(fileName); } FileStream fs = null; StreamWriter sw = null; //先打印标头 StringBuilder strColu = new StringBuilder(); StringBuilder strValue = new StringBuilder(); int i = 0; try { fs = new FileStream(fileName, FileMode.Create, FileAccess.Write); sw = new StreamWriter(fs, Encoding.Default); for (i = 0; i &lt;= dt.Columns.Count - 1; i++) { strColu.Append(dt.Columns[i].ColumnName); strColu.Append(&quot;,&quot;); } strColu.Remove(strColu.Length - 1, 1);//移出掉最后一个,字符 sw.WriteLine(strColu); foreach (DataRow dr in dt.Rows) { strValue.Remove(0, strValue.Length);//移出 for (i = 0; i &lt;= dt.Columns.Count - 1; i++) { strValue.Append(ReplaceChar(dr[i] == DBNull.Value ? &quot;&quot; : dr[i].ToString())); strValue.Append(&quot;,&quot;); } strValue.Remove(strValue.Length - 1, 1);//移出掉最后一个,字符 sw.WriteLine(strValue.ToString()); } sw.Close(); } catch (Exception ex) { System.Windows.MessageBox.Show(ex.Message.ToString()); } System.Windows.Forms.MessageBox.Show(&quot;保存CSV成功&quot;, &quot;提示&quot;, MessageBoxButtons.OK, MessageBoxIcon.Information); } } /// &lt;summary&gt; /// 防止串列 /// &lt;/summary&gt; /// &lt;param name=&quot;str&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; private string ReplaceChar(string str) { string field = str; if (field.IndexOf(&quot;+&quot;) == 0 || field.IndexOf(&quot;-&quot;) == 0 || field.IndexOf(&quot;=&quot;) == 0 || field.IndexOf(&quot;&#39;&quot;) == 0) { if (IsNum(field)) { return field; } return string.Format(&quot;\\t{0}&quot;, field); } if (field.IndexOf(&#39;,&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field.IndexOf(&#39;&quot;&#39;) &gt;= 0) { return string.Format(&quot;\\t{0}&quot;, field); } if (field.IndexOf(&#39;\\r&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field.IndexOf(&#39;\\n&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field.IndexOf(&#39;\\&quot;&#39;) &gt;= 0) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } if (field != field.Trim()) { return string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field); } return field; } private bool IsNum(object num) { try { Convert.ToDecimal(num); return true; } catch { return false; } } DataTable转Excel/// &lt;summary&gt; /// DataTable转Excel /// &lt;/summary&gt; /// &lt;param name=&quot;m_DataTable&quot;&gt;&lt;/param&gt; public void DataToExcel(DataTable m_DataTable) { SaveFileDialog saveFile = new SaveFileDialog(); saveFile.Title = &quot;保存文件&quot;; saveFile.Filter = &quot;EXECL文件(*.xls) |*.xls |所有文件(*.*) |*.*&quot;; saveFile.FilterIndex = 1; if (saveFile.ShowDialog() == System.Windows.Forms.DialogResult.OK) { string FileName = saveFile.FileName; if (File.Exists(FileName)) { File.Delete(FileName); } FileStream objFileStream; StreamWriter objStreamWriter; string strLine = &quot;&quot;; objFileStream = new FileStream(FileName, FileMode.OpenOrCreate, FileAccess.Write); objStreamWriter = new StreamWriter(objFileStream, System.Text.Encoding.Unicode); for (int i = 0; i &lt; m_DataTable.Columns.Count; i++) { strLine = strLine + m_DataTable.Columns[i].Caption.ToString() + Convert.ToChar(9); } objStreamWriter.WriteLine(strLine); strLine = &quot;&quot;; for (int i = 0; i &lt; m_DataTable.Rows.Count; i++) { for (int j = 0; j &lt; m_DataTable.Columns.Count; j++) { if (m_DataTable.Rows[i].ItemArray[j] == null) { strLine = strLine + &quot; &quot; + Convert.ToChar(9); } else { string rowstr = &quot;&quot;; rowstr = m_DataTable.Rows[i].ItemArray[j].ToString(); if (rowstr.IndexOf(&quot;\\r\\n&quot;) &gt; 0) { rowstr = rowstr.Replace(&quot;\\r\\n&quot;, &quot; &quot;); } if (rowstr.IndexOf(&quot;\\t&quot;) &gt; 0) { rowstr = rowstr.Replace(&quot;\\t&quot;, &quot; &quot;); } strLine = strLine + rowstr + Convert.ToChar(9); } } objStreamWriter.WriteLine(strLine); strLine = &quot;&quot;; } objStreamWriter.Dispose(); objStreamWriter.Close(); objFileStream.Dispose(); objFileStream.Close(); System.Windows.Forms.MessageBox.Show(&quot;保存EXCEL成功&quot;, &quot;提示&quot;, MessageBoxButtons.OK, MessageBoxIcon.Information); } }","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"WPF知识点","slug":"WPF_Learning_1","date":"2021-01-20T16:30:00.000Z","updated":"2022-06-07T02:06:18.542Z","comments":true,"path":"DotNET/WPF_Learning_1/","link":"","permalink":"/DotNET/WPF_Learning_1/","excerpt":"2021首发","text":"2021首发 1. 首先写一个List转DataTable的方法public DataTable ListToDt&lt;T&gt;(IEnumerable&lt;T&gt; collection) { var props = typeof(T).GetProperties(); var dt = new DataTable(); dt.Columns.AddRange(props.Select(p =&gt; new DataColumn(p.Name, p.PropertyType)).ToArray()); if (collection.Count() &gt; 0) { for (int i = 0; i &lt; collection.Count(); i++) { ArrayList tempList = new ArrayList(); foreach (PropertyInfo pi in props) { object obj = pi.GetValue(collection.ElementAt(i), null); tempList.Add(obj); } object[] array = tempList.ToArray(); dt.LoadDataRow(array, true); } } return dt; } 然后定义一个listpublic List&lt;Teacher&gt; list = new List&lt;Teacher&gt;(); public class Teacher { public string Name { get; set; } public string Password { get; set; } } 方法内调用DataTable dt = ListToDt(list); DataView dv = new DataView(dt); 这样一个List就转成了DataView2. 然后是DataTable行转列的方法private DataTable SwapTable(DataTable tableData) { int intRows = tableData.Rows.Count; int intColumns = tableData.Columns.Count; //转二维数组 string[,] arrayData = new string[intRows, intColumns]; for (int i = 0; i &lt; intRows; i++) { for (int j = 0; j &lt; intColumns; j++) { arrayData[i, j] = tableData.Rows[i][j].ToString(); } } //下标对换 string[,] arrSwap = new string[intColumns, intRows]; for (int m = 0; m &lt; intColumns; m++) { for (int n = 0; n &lt; intRows; n++) { arrSwap[m, n] = arrayData[n, m]; } } DataTable dt = new DataTable(); //添加列 for (int k = 0; k &lt; intRows; k++) { dt.Columns.Add(new DataColumn(arrSwap[0, k])); } //添加行 for (int r = 1; r &lt; intColumns; r++) { DataRow dr = dt.NewRow(); for (int c = 0; c &lt; intRows; c++) { dr[c] = arrSwap[r, c].ToString(); } dt.Rows.Add(dr); } //添加行头 DataColumn ColRowHead = new DataColumn(tableData.Columns[0].ColumnName); dt.Columns.Add(ColRowHead); dt.Columns[ColRowHead.ColumnName].SetOrdinal(0); for (int i = 0; i &lt; intColumns - 1; i++) { dt.Rows[i][ColRowHead.ColumnName] = tableData.Columns[i + 1].ColumnName; } return dt; } 3. WPF获取选中某行的值/// &lt;summary&gt; /// 选中事件 /// &lt;/summary&gt; /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt; private void dataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e) { DataRowView mySelectedItem = (DataRowView)dataGrid.SelectedItem; //判断有没有选中 if (mySelectedItem != null) { DataRow result = mySelectedItem.Row; DataTable dataTableNew = dataTable.Clone(); dataTableNew.ImportRow(result); this.dataGrid1.ItemsSource = new DataView(dataTableNew); } } 4. DataTable筛选数据DataRow[] dr = dataTable.Select(&quot;Name =&#39;张三&#39;&quot;, &quot;Time DESC&quot;); DataTable dataTableNew = dataTable.Clone(); for (int i = 0; i &lt; dr.Length; i++) { dataTableNew.ImportRow(dr[i]); } this.dataGrid1.ItemsSource = new DataView(dataTableNew); 5. TextBox实时更新Binding的PropertyText=&quot;{Binding SearchText,UpdateSourceTrigger=PropertyChanged}&quot;","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#获取指定文件夹所有文件","slug":"CSharp_File","date":"2020-12-30T17:00:00.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/CSharp_File/","link":"","permalink":"/DotNET/CSharp_File/","excerpt":"2020快过完了，赶紧水一篇博客","text":"2020快过完了，赶紧水一篇博客 //获取桌面路径 string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); string path = string.Format(@&quot;{0}\\{1}&quot;, desktop, &quot;加密前&quot;); DirectoryInfo folder = new DirectoryInfo(path); //从路径下循环获取文件 foreach(FileInfo file in folder.GetFiles()) { //打印文件路径到控制台 Console.WriteLine(file.FullName); } Console.ReadKey(); 控制台打印信息 很明显，这个打印的顺序就不对可以稍加修改一下，写入到txtstring desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); string path = string.Format(@&quot;{0}\\{1}&quot;, desktop, &quot;加密前&quot;); DirectoryInfo folder = new DirectoryInfo(path); StreamWriter txt; if (File.Exists(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;)) { //把原来的删掉重新创建一个 File.Delete(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;); txt = File.CreateText(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;); } else { //创建-&gt;路径.txt txt = File.CreateText(desktop + &quot;\\\\&quot; + &quot;路径.txt&quot;); } List&lt;string&gt; fileNameList = new List&lt;string&gt;(); foreach (FileInfo file in folder.GetFiles()) { //写入到list里面存储 fileNameList.Add(file.FullName); } //创建一个数组 string[] list=new string[fileNameList.Count]; //把list值加到数组 for(int i = 0; i &lt; fileNameList.Count; i++) { list[i] = fileNameList[i]; } //调用排序方法 Array.Sort(list, new FileNameSort()); foreach(var fileUrl in list) { //写入txt txt.WriteLine(fileUrl); Console.WriteLine(fileUrl); } //释放资源 txt.Close(); txt.Dispose(); Console.ReadKey(); 这里说一下为啥要创建list和数组因为看上图顺序是乱的，所以就排序了一下 这一次就没问题了 包括文本写入也正常排序的方法public class FileNameSort : IComparer { //调用windos 的 DLL [System.Runtime.InteropServices.DllImport(&quot;Shlwapi.dll&quot;, CharSet = CharSet.Unicode)] private static extern int StrCmpLogicalW(string param1, string param2); //前后文件名进行比较。 public int Compare(object name1, object name2) { if (null == name1 &amp;&amp; null == name2) { return 0; } if (null == name1) { return -1; } if (null == name2) { return 1; } return StrCmpLogicalW(name1.ToString(), name2.ToString()); } }","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"Windows服务器搭建私人GitLab","slug":"GitLab_Windows10","date":"2020-10-11T21:00:00.000Z","updated":"2022-06-07T02:06:18.386Z","comments":true,"path":"Other/GitLab_Windows10/","link":"","permalink":"/Other/GitLab_Windows10/","excerpt":"记录一下Windows服务器搭建私人GitLab","text":"记录一下Windows服务器搭建私人GitLab Windows服务器搭建GitLab需要安装Java环境Java环境下载Gitblit-1.9.1.zip 下载JavaJDK并配置环境此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;添加变量名：JAVA_HOME 变量值：电脑上JDK安装的绝对路径 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; 选择path这一列点编辑 然后新增两行 %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin 打开cmd输入java -version查看版本号，没有错误说明安装成功打开data文件夹编辑找到defaults.properties配置文件# 设置版本库的位置 git.repositoriesFolder = 你要的路径 # 设置端口号 server.httpPort = 端口号 # 设置ip地址 server.httpBindInterface = 本机ipv4 server.certificateAlias = localhost 修改installService.cmd文件@REM arch = x86, amd64, or ia32 SET ARCH=amd64 SET CD = C:\\WebFile\\GitLab --(GitLab解压后的路径) 然后在命令窗口运行gitlab.cmd（切记cmd窗口不能关闭）最后以管理员账号登陆，就可以自己添加存储库了，然后自行拉取提交推送","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":".NET Core WebAPI使用EFCore连接MySQL","slug":"DotNETCore_WebAPI_EFCore_MySQL","date":"2020-07-09T18:00:00.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/DotNETCore_WebAPI_EFCore_MySQL/","link":"","permalink":"/DotNET/DotNETCore_WebAPI_EFCore_MySQL/","excerpt":"记录一下.NET Core使用EFCore连接MySQL数据库","text":"记录一下.NET Core使用EFCore连接MySQL数据库 首先从nuget包里面找到MySQL.Data.EntityFrameworkCore进行安装 因为我的.NET Core是最新版本3.1，所以这个EFCore我安装的也是最新版本8.0.20第一步在配置文件appsettings.json里面添加连接字符串&quot;ConnectionStrings&quot;: { &quot;MySQLConnection&quot;: &quot;server=本地或者线上地址;uid=用户名;pwd=密码;port=端口号;database=需要连接的数据库名称;SslMode=None&quot; } 第二步添加数据库上下文类public class EFCoreDbContext:DbContext { public virtual DbSet&lt;UserInfo&gt; Users { get; set; } //将实体类添加Context中 public EFCoreDbContext(DbContextOptions&lt;EFCoreDbContext&gt; options) : base(options) { } } 第三步Startup.cs里面的ConfigureServices方法下面读取服务添加到容器services.AddDbContext&lt;EFCoreDbContext&gt;(options =&gt; options.UseMySQL(Configuration.GetConnectionString(&quot;MySQLConnection&quot;))); 最后在需要使用到数据库的控制器内添加构造函数，初始化数据库上下文类/// &lt;summary&gt; /// 初始化数据库上下文 /// &lt;/summary&gt; private readonly EFCoreDbContext _efCoreDbContext; /// &lt;summary&gt; /// 构造及初始化类参数 /// &lt;/summary&gt; public ImageController(EFCoreDbContext coreDbContext) { _efCoreDbContext = coreDbContext; } 最后接口通过上下文类取出相应的数据，如果数据不为空则连接成功2021年6月29日重新打开项目发现MySql.Data.EntityFrameworkCore已弃用把这个Nuget包删掉安装MySQL.EntityFrameworkCore就好了","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":".NET Core WebAPI全局异常处理","slug":"DotNETCore_WebAPI_Exception","date":"2020-07-03T16:00:00.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/DotNETCore_WebAPI_Exception/","link":"","permalink":"/DotNET/DotNETCore_WebAPI_Exception/","excerpt":"今天记录一下.NET Core WebAPI的全局异常处理","text":"今天记录一下.NET Core WebAPI的全局异常处理 上代码，先创建一个类，命名就叫ExceptionFilter继承于ExceptionFilterAttributepublic class ExceptionFilter:ExceptionFilterAttribute { public override void OnException(ExceptionContext context) { if (!context.ExceptionHandled) { context.Result = new JsonResult(new { Code = &quot;500&quot;, Res = new { Data = context.Exception.Message, Msg = &quot;接口发生错误&quot; } }); context.ExceptionHandled = true; } } } 然后在Startup类下面的ConfigureServices方法下面全局注册一下// 此方法由运行时调用，使用此方法将服务添加到容器 public void ConfigureServices(IServiceCollection services) { services.AddControllers(); //全局配置Json序列化大小写处理 services.AddMvc().AddJsonOptions(options =&gt; { options.JsonSerializerOptions.PropertyNamingPolicy = null; options.JsonSerializerOptions.DictionaryKeyPolicy = null; }); //全局注册异常类 services.AddMvc(options =&gt; { options.Filters.Add&lt;ExceptionFilter&gt;(); }); //解决中文被编码 services.AddControllersWithViews().AddJsonOptions(options =&gt; { options.JsonSerializerOptions.Encoder = JavaScriptEncoder.Create(UnicodeRanges.All); }); } 为了防止返回的Json大小写不匹配，我还加了Json大小写处理，确定Json输出和后台定义的格式以及大小写一致，和返回的中文乱码情况在接口报错的时候会返回后台固定的Code，用来判断接口状态","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":".NET Core 部署IIS","slug":"DotNETCore_IIS","date":"2020-06-10T15:30:00.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/DotNETCore_IIS/","link":"","permalink":"/DotNET/DotNETCore_IIS/","excerpt":"记录.NET Core部署IIS遇到的坑","text":"记录.NET Core部署IIS遇到的坑 VS2019发布项目到文件夹，然后拷贝到服务器，这些正常流程结束后访问api，出现以下情况第一种500错误 第二种502错误 百度了很多得到以下解决方案点击下载：dotnet-hosting-3.1.5-win.exe 下载并且安装.NET Core托管捆绑包安装程序重新启动IIS或者重新添加网站，发布启动即可访问成功","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"MySQL和SQL Server存储过程","slug":"MySQL_MSSQL_Stored_Procedure","date":"2020-05-11T17:40:00.000Z","updated":"2022-06-07T02:06:18.433Z","comments":true,"path":"SQL/MySQL_MSSQL_Stored_Procedure/","link":"","permalink":"/SQL/MySQL_MSSQL_Stored_Procedure/","excerpt":"记录一下数据库存储过程","text":"记录一下数据库存储过程 MySQL创建带条件查询的存储过程DELIMITER $$ CREATE PROCEDURE `数据库名`.`存储过程名`(IN 自定义参数 VARCHAR(200)) BEGIN SELECT * FROM 表名 WHERE 字段 = 自定义参数; END$$ DELIMITER ; 调用并传参CALL 存储过程名(&#39;参数值&#39;) 删除存储过程DROP PROCEDURE 存储过程名 SQL Server创建带条件查询的存储过程create proc 存储过程名 @自定义参数 varchar(200) as select * from 表名 where 字段=@自定义参数 go 调用并传参EXEC 存储过程名 &#39;参数值&#39; 删除存储过程drop proc 存储过程名","categories":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}]},{"title":"vue+elementui遇到的坑","slug":"Vue_Learning_2","date":"2020-04-24T21:30:00.000Z","updated":"2022-06-07T02:06:18.542Z","comments":false,"path":"Vue/Vue_Learning_2/","link":"","permalink":"/Vue/Vue_Learning_2/","excerpt":"入门vue，第二篇","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById(\"enc_error\").innerHTML = \"password error!\" }; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","categories":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}]},{"title":"学习vue遇到的坑","slug":"Vue_Learning_1","date":"2020-04-23T16:25:00.000Z","updated":"2022-06-07T02:06:18.542Z","comments":false,"path":"Vue/Vue_Learning_1/","link":"","permalink":"/Vue/Vue_Learning_1/","excerpt":"入门Vue，第一篇","text":"function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById(\"enc_error\").innerHTML = \"password error!\" }; function decrypt() { var passwd = document.getElementById(\"enc_pwd_input\").value; console.log(passwd); doDecrypt(passwd, onError); }","categories":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Vue","slug":"Vue","permalink":"/categories/Vue/"}]},{"title":"MVC连接MySQL教程","slug":"MySQL_MVC5_EF6","date":"2020-04-14T16:16:16.000Z","updated":"2022-06-07T02:06:18.433Z","comments":true,"path":"SQL/MySQL_MVC5_EF6/","link":"","permalink":"/SQL/MySQL_MVC5_EF6/","excerpt":"记录一下MVC+EF连接MySQL数据库需要安装的插件","text":"记录一下MVC+EF连接MySQL数据库需要安装的插件 准备以下文件 点击下载：mysql-connector-net-6.9.12.msi 点击下载：mysql-for-visualstudio-1.2.8.msi MySQL Data和MySQL Data Entity（NuGet进行安装，这边装的版本都是6.9.12） 在model文件夹右击添加新建项，选择ADO.NET实体数据模型 选择来自数据库的EF设计器 新建连接，更改数据源，选择MySQL Database，连接MySQL服务器 注意：这里如果下一步时，出现闪退，则要检查MySQL Data和MySQL Data Entity版本。选择所有表 然后点击完成即可生成","categories":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"SQL","slug":"SQL","permalink":"/categories/SQL/"}]},{"title":"C# Reamrk特性","slug":"CSharp_Remark_Attribute","date":"2020-04-03T11:11:11.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/CSharp_Remark_Attribute/","link":"","permalink":"/DotNET/CSharp_Remark_Attribute/","excerpt":"Remark特性的应用场景","text":"Remark特性的应用场景 场景一：用户状态的枚举值，定义的是英文的字段，需要输出中文含义。枚举定义如下：public enum UserState { /// &lt;summary&gt; /// 正常 /// &lt;/summary&gt; Normal = 0, /// &lt;summary&gt; /// 冻结 /// &lt;/summary&gt; Frozen = 1, /// &lt;summary&gt; /// 删除 /// &lt;/summary&gt; Deleted = 2 } 普通做法：根据枚举值进行判断，然后输出中文含义：UserState userState = UserState.Normal; switch (userState) { case UserState.Deleted: Console.WriteLine(&quot;删除&quot;); break; case UserState.Normal: Console.WriteLine(&quot;正常&quot;); break; case UserState.Frozen: Console.WriteLine(&quot;冻结&quot;); break; } 这种写法违反开不原则，不利于以后的扩展，下面使用特性实现先定义Remark特性：using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace TianciAttribute { /// &lt;summary&gt; /// 特性 /// &lt;/summary&gt; public class RemarkAttribute: Attribute { private string _Remark = null; /// &lt;summary&gt; /// 有参构造函数 /// &lt;/summary&gt; /// &lt;param name=&quot;remark&quot;&gt;&lt;/param&gt; public RemarkAttribute(string remark) { this._Remark = remark; } public string GetRemark() { return _Remark; } } } UserState枚举修改如下：public enum UserState { /// &lt;summary&gt; /// 正常 /// &lt;/summary&gt; [Remark(&quot;正常&quot;)] Normal = 0, /// &lt;summary&gt; /// 冻结 /// &lt;/summary&gt; [Remark(&quot;冻结&quot;)] Frozen = 1, /// &lt;summary&gt; /// 删除 /// &lt;/summary&gt; [Remark(&quot;删除&quot;)] Deleted = 2 } 写一个扩展方法，对Enum类型进行扩展：using System; using System.Collections.Generic; using System.Linq; using System.Reflection; using System.Text; using System.Threading.Tasks; namespace TianciAttribute { public static class RemarkExtension { /// &lt;summary&gt; /// Enum的扩展方法，静态类，静态方法，第一个参数前面添加this /// &lt;/summary&gt; /// &lt;param name=&quot;value&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static string GetRemark(this Enum value) { //获取类型 Type type = value.GetType(); //获取字段 FieldInfo fieId = type.GetField(value.ToString()); //判断字段上面是否定义了ReamrkAttribute特性 if (fieId.IsDefined(typeof(RemarkAttribute))) { //创建实例 RemarkAttribute attribute = (RemarkAttribute)fieId.GetCustomAttribute(typeof(RemarkAttribute)); return attribute.GetRemark(); } else { return value.ToString(); } } } } 最后Main()方法里面调用using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace TianciAttribute { class Program { static void Main(string[] args) { UserState userState = UserState.Normal; Console.WriteLine(userState.GetRemark()); Console.ReadKey(); } } } 输出结果","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#理论面试题","slug":"CSharp_Interview_ques_2","date":"2020-03-06T13:14:20.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/CSharp_Interview_ques_2/","link":"","permalink":"/DotNET/CSharp_Interview_ques_2/","excerpt":"这次的面试题大多为理论知识","text":"这次的面试题大多为理论知识 1. 数组有没有length()方法，String有没有length()方法？string[] sz = { &quot;1&quot;, &quot;2&quot;, &quot;3&quot; }; Console.WriteLine(sz.Length); String a = &quot;1&quot;; Console.WriteLine(a.Length); 很明显这两个都有length()方法2. 谈谈final，finally，finalize的区别final ：修饰符（关键字）如果类被声明为final,就不能再派生新的子类也不能作为父类被继承 finally ：在异常处理时提供finally块来执行操作，不管有没有异常，finally里面的代码始终会被执行 finalize ：方法名，finalize是在Object类中定义的，所有的类都继承了它 3. 如何处理几十万条并发数据使用缓存，访问过的数据不需要二次访问数据库 数据库使用存储过程，尽量分页 使用多线程分批次处理 4. 堆和栈的区别栈：由编译器自动分配、释放，在函数体中定义的变量通常在栈上 堆：由程序员分配释放，用new、malloc分配内存函数得到的就是在堆上 5. 成员变量和成员函数前加static的作用它们被称为常成员变量和常成员函数，又称为类成员变量和类成员函数，分别用来反映类的状态， 比如类成员变量可以用来统计类实例的数量，类成员函数负责这种统计的动作 6. C#可否直接对内存进行操作C#可以直接对内存进行操作。但是默认情况下，为了保持类型安全，C#不支持指针运算 但是可以通过使用unsafe关键字，定义可使用指针的不安全代码 7. Const和ReadOnly？Const关键字用来声明编译时常量 ReadOnly用来声明运行时常量 8. String和StringBuffer的区别和优缺点String类表示内容不可改变的字符串 StringBuffer类表示内容可以被修改的字符串 StringBuffer的执行速度要大于String 9.什么是值类型，什么是引用类型？值类型（value type）：byte，short，int，long，float，double，decimal，char，bool 和 struct 统称为值类型。值类型变量声明后，不管是否已经赋值，编译器为其分配内存。 引用类型（reference type）：string 和 class统称为引用类型。当声明一个类时，只在栈中分配一小片内存用于容纳一个地址，而此时并没有为其分配堆上的内存空间。当使用 new 创建一个类的实例时，分配堆上的空间，并把堆上空间的地址保存到栈上分配的小片空间中。 先到这里吧！","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"/tags/面试题/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#常见算法题","slug":"CSharp_Interview_ques_1","date":"2020-03-03T10:20:30.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/CSharp_Interview_ques_1/","link":"","permalink":"/DotNET/CSharp_Interview_ques_1/","excerpt":"记录一下遇到过的面试题","text":"记录一下遇到过的面试题 打印出2000-2500之间所有的闰年年份1.年份必须为4的倍数for (int a = 2000; a &lt;= 2500; a++) { if (a % 4 == 0) { Console.WriteLine(a); } } 打印出1+2!+3!+…+20!的和，就是1-20的阶乘之和第一种方法static void Main(string[] args) { int sum = 0; for (int i = 1; i &lt;= 20; i++) { sum += jieCheng(i); } Console.WriteLine(sum); Console.ReadKey(); } static int jieCheng(int n) { if (n == 1) { return 1; } else { return n * jieCheng(n - 1); } } 第二种方法int sum = 0; int n = 20; for (int i = 1; i &lt;= n; i++) { int temp = 1; for (int j = 1; j &lt;= i; j++) { temp *= j; } sum += temp; } Console.WriteLine(sum); Console.ReadKey(); 写出一个方法，参数是三个整数（x,y,z），按从小到大排序第一种使用数组自带的排序static void PaiXu(int x, int y, int z) { int[] num = new int[3]; num[0] = x; num[1] = y; num[2] = z; Array.Sort(num); Console.WriteLine(&quot;从小到大结果依次为：&quot;); for (int i = 0; i &lt; num.Length; i++) { Console.WriteLine(num[i]); } } 如果题目要求从用户输入的三个整数来进行排序的话，可以这样写int[] num = new int[3]; Console.WriteLine(&quot;请输入三个整数&quot;); for (int i = 0; i &lt; num.Length; i++) { Console.WriteLine(&quot;请输入第{0}个数字&quot;, i + 1); num[i] = Convert.ToInt32(Console.ReadLine()); } //从小到大排序 Array.Sort(num); Console.WriteLine(&quot;数字从小到大依次为：&quot;); for (int i = 0; i &lt; num.Length; i++) { Console.WriteLine(num[i]); } Console.ReadKey(); 1，1，2，3，5，8，…获取第30个数值没有规定的话这个方便理解int[] list = new int[30]; list[0] = 1; list[1] = 1; for (int i = 2; i &lt; 30; i++) { list[i] = list[i - 1] + list[i - 2]; Console.WriteLine(list[i]); } Console.ReadKey(); 必须使用递归的话可以这样写static void Main(string[] args) { for (int i = 0; i &lt; 30; i++) { Console.WriteLine(GetNum(i)); } Console.ReadKey(); } static int GetNum(int n) { if (n == 0 || n == 1) { return 1; } else { return GetNum(n - 1) + GetNum(n - 2); } } 最经典的冒泡排序int tem = 0; int[] list = { 1, 23, 12, 421, 31, 213, 42 }; for (int i = 0; i &lt; list.Length - 1; i++) { for (int j = 0; j &lt; list.Length - 1 - i; j++) { if (list[j] &gt; list[j + 1]) { tem = list[j]; list[j] = list[j + 1]; list[j + 1] = tem; } } } Console.ReadKey(); 产生一个int数组，长度为100，并向其中随即插入1-100，且不能重复List&lt;int&gt; lst = new List&lt;int&gt;(); Random r = new Random(); while (true) { int temp = r.Next(1, 101); if (lst.Count == 100) { break; } if (!lst.Contains(temp)) { lst.Add(temp); } } for (int i = 0; i &lt; lst.Count; i++) { Console.WriteLine(lst[i]); } Console.ReadKey(); 打印九九乘法表int i, j; for (i = 1; i &lt;= 9; i++) { for (j = 1; j &lt;= i; j++) { Console.Write(&quot;{0}*{1}={2,2} &quot;, j, i, j * i); } Console.WriteLine(); } Console.ReadKey(); 无师自通的水仙花数，两种方式都可以取个十百位for (int i = 100; i &lt; 1000; i++) { //int n1 = i / 100 % 10;//百位 //int n2 = i / 10 % 10; //十位 //int n3 = i % 10;//个位 string num = i.ToString(); int n1 = int.Parse(num[0].ToString());//百位 int n2 = int.Parse(num[1].ToString());//十位 int n3 = int.Parse(num[2].ToString());//个位 if (n1 * n1 * n1 + n2 * n2 * n2 + n3 * n3 * n3 == i) { Console.WriteLine(i); } } 行了行了就这样吧！！！","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"面试题","slug":"面试题","permalink":"/tags/面试题/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"C#扩展方法","slug":"CSharp_Extension","date":"2020-02-10T22:00:00.000Z","updated":"2022-06-07T02:06:18.370Z","comments":true,"path":"DotNET/CSharp_Extension/","link":"","permalink":"/DotNET/CSharp_Extension/","excerpt":"C#扩展方法","text":"C#扩展方法 定义1. 声明扩展方法的类必须为static类；2. 扩展方法本身也必须声明为static；3. 扩展方法必须包含关键字this作为第一个参数类型，并在后面跟着它所扩展的类型的名称。开始操作先创建一个静态类叫StringExtension然后简单写一个静态方法，我这里写的是布尔，用来判断入参是否等于1控制器导入扩展方法所在的类的命名空间，限制扩展方法的使用public static class StringExtension { /// &lt;summary&gt; /// Remark：判断输入的是不是1 /// &lt;/summary&gt; /// &lt;param name=&quot;input&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; public static bool IsOne(this int input) { if (input == 1) { return true; } return false; } } 接口调用方法，传参为1，返回true 总结- 扩展方法必须定义在静态类中，扩展方法本身也是静态方法，扩展方法也可以重载。- 如果扩展方法和对应的类位于不同的命名空间，使用时应引入扩展方法所在静态类的命名空间。- 当类本身的方法与扩展方法重名时，类本身的方法被优先调用。（建议通过命名空间的方式来限制扩展方法的使用）- 扩展方法不要过多使用。尤其是系统定义的类，不要随意增加扩展方法。","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"WebAPI全局异常处理","slug":"WebAPI_Exception","date":"2020-02-03T21:21:21.000Z","updated":"2022-06-07T02:06:18.558Z","comments":true,"path":"DotNET/WebAPI_Exception/","link":"","permalink":"/DotNET/WebAPI_Exception/","excerpt":"记录一下WebAPI的全局异常处理","text":"记录一下WebAPI的全局异常处理 通常接口出现一些小错误，页面会返回一堆看不懂的代码这对于我们寻找错误并没有什么太大的帮助，反而看着很难受 遇到这种情况我们可以写一个全局异常过滤器，接口报错直接跳到过滤器首先新建一个ActionFilter类，继承至ExceptionFilterAttribute代码如下/// &lt;summary&gt; /// Remark:过滤掉WebApi接口的异常，统一返回异常信息 /// &lt;/summary&gt; public class ActionFilter : ExceptionFilterAttribute { public override void OnException(HttpActionExecutedContext context) { //记录错误日志 //LogHelper.Error($&quot;{context.Exception }&quot;, context.Request.RequestUri.AbsolutePath); //篡改Response context.Response = new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(JsonConvert.SerializeObject(new { code = &quot;520&quot;, res = new { msg = &quot;接口有问题&quot; } })) }; } } 然后在WebApiConfig类里面全局配置public static class WebApiConfig { public static void Register(HttpConfiguration config) { // Web API 配置和服务 // Web API 路由 config.MapHttpAttributeRoutes(); config.Routes.MapHttpRoute( name: &quot;DefaultApi&quot;, routeTemplate: &quot;api/{controller}/{id}&quot;, defaults: new { id = RouteParameter.Optional } ); //全局注册异常过滤器 config.Filters.Add(new ActionFilter()); } } 只要接口出现异常就会跳到这个地方，返回我们定义的信息 可以看到，尽管接口已经抛出异常了，但是网页返回的信息依旧是我所定义的错误信息可以打印到日志，避免接口信息泄露，具体打印日志下期再说学业繁忙，告辞","categories":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"DotNET","slug":"DotNET","permalink":"/categories/DotNET/"}]},{"title":"Hexo文件操作","slug":"Hexo_Command","date":"2020-01-13T20:00:00.000Z","updated":"2022-06-07T02:06:18.386Z","comments":true,"path":"Hexo/Hexo_Command/","link":"","permalink":"/Hexo/Hexo_Command/","excerpt":"搭建Hexo静态博客难免会遇到小问题","text":"搭建Hexo静态博客难免会遇到小问题 今天讲一下遇到的一些小坑，以及解决办法通常博客里面会有一些其他小页面，不是由hexo生成的页面，例如life文件夹 那么这些页面放到public文件夹内，每次hexo clean都会被清除掉然后也不会上传到git，那么这个应该怎么解决呢其实直接把文件夹拖到hexo下面的source下面跟_posts文件夹同级就行了 这样的话每次生成和上传就都会带上这个文件夹了但是又遇到一个新问题，这是单独的页面每次重新生成都会渲染上hexo的主题样式会导致这个单独的页面内容跑版，怎么办呢其实很简单，找到_config.yml下面的skip_render改成这个样子，life为你的文件夹名 这样就大功告成了！！！","categories":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}]},{"title":"Hexo安装与部署","slug":"Hexo_Setup","date":"2020-01-12T12:00:00.000Z","updated":"2022-06-07T02:06:18.402Z","comments":true,"path":"Hexo/Hexo_Setup/","link":"","permalink":"/Hexo/Hexo_Setup/","excerpt":"打开Git Bash，输入以下代码安装hexo","text":"打开Git Bash，输入以下代码安装hexo $ npm install -g hexo 安装完成在任意盘创建文件夹，例如D:\\hexo再右击打开Git Bash，输入$ cd D:\\hexo $ hexo init hexo会自动下载一些文件到这个目录然后继续输入$ npm install hexo-deployer-git 这个是因为等下提交代码需要此插件现在生成网站并预览$ hexo g $ hexo s 进入浏览器输入localhost:4000访问你的网站吧，Ctrl+C停止预览在网上下一个主题然后放进hexo文件夹下面的theme文件夹里面修改hexo文件夹中_config.yml文件里面的theme属性将原来的landscape改为你所下载主题的文件夹名，打开Git Bash重新生成并预览$ hexo g $ hexo s 你会发现页面已经适应了你的主题之后打开hexo目录下的_config.yml最后一段 绑定你的GitHub项目地址$ hexo clean $ hexo g $ hexo d 以上代码分别是清除public文件夹，重新生成，和提交代码到GitHub然后上GitHub你会发现存储库里面的文件都是public文件夹下面的每次提交代码都只会提交此文件夹下的代码本期hexo安装与部署就到这里，下期见","categories":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}],"tags":[{"name":"技术","slug":"技术","permalink":"/tags/技术/"}],"keywords":[{"name":"Hexo","slug":"Hexo","permalink":"/categories/Hexo/"}]},{"title":"诗词欣赏","slug":"UpdateInfo","date":"2020-01-09T22:22:22.000Z","updated":"2022-06-07T02:06:18.542Z","comments":true,"path":"Other/UpdateInfo/","link":"","permalink":"/Other/UpdateInfo/","excerpt":"","text":"你说帘外海棠，锦屏鸳鸯；后来庭院春深，咫尺画堂 你说笛声如诉，费尽思量；后来茶烟尚绿，人影茫茫 你说可人如玉，与子偕臧；后来长亭远望，夜色微凉 你说霞染天光，陌上花开与谁享；后来烟笼柳暗，湖心水动影无双 你说彼岸灯火，心之所向；后来渔舟晚唱，烟雨彷徨 你说水静莲香，惠风和畅；后来云遮薄月，清露如霜 你说幽窗棋罢，再吐衷肠；后来风卷孤松，雾漫山冈 你说红袖佯嗔，秋波流转思张敞；后来黛眉长敛，春色飘零别阮郎 你说暗香浮动，刹那光芒；后来玉殒琼碎，疏影横窗 你说良辰美景，乘兴独往；后来红尘紫陌，雪落太行 你说赋尽高唐，三生石上；后来君居淄右，妾家河阳 你说玉楼朱颜，飞月流觞迎客棹；后来幽谷居士，枕琴听雨卧禅房 你说高山流水，客答春江；后来章台游冶，系马垂杨 你说锦瑟韶光，华灯幢幢；后来荼蘼开至，青苔满墙 你说天地玄黄，风月琳琅；后来月斜江上，云淡天长 你说兰舟轻发，西楼月下忆姣娘；后来江湖两忘，只影天涯踏秋殇 你说幽谷听溪，寻芳清岗，后来落花丁零，水涸潇湘 你说霜冷长河，蒹葭苍苍，后来伊人何在？孤坐未央 你说月洒寒江，玉柱琼梁，后来冷镜残钩，三更榻凉 你说梦呓故园，桃花水里游鸳鸯；后来千山暮雪，老翅几回自奔忙","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"/tags/娱乐/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]},{"title":"博客正式上线","slug":"MyFirstBlog","date":"2020-01-05T22:22:22.000Z","updated":"2022-06-07T02:06:18.417Z","comments":true,"path":"Other/MyFirstBlog/","link":"","permalink":"/Other/MyFirstBlog/","excerpt":"前言TianciBlog于2020-01-05正式上线","text":"前言TianciBlog于2020-01-05正式上线 惹不住题诗一首故人西辞富士康为学技术到蓝翔蓝翔科技包分配分配又到富士康故人二辞富士康转身就去新东方苦练三年当大厨做饭还在富士康故人三辞富士康为了生活上武当武当出来包分配富士康里当门卫","categories":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}],"tags":[{"name":"娱乐","slug":"娱乐","permalink":"/tags/娱乐/"}],"keywords":[{"name":"Other","slug":"Other","permalink":"/categories/Other/"}]}]}